// Generated by dust (version 0.11.24) - do not edit
#include <cpp11.hpp>

[[cpp11::register]]
cpp11::sexp dust_seir_capabilities();

[[cpp11::register]]
cpp11::sexp dust_seir_gpu_info();
[[cpp11::register]]
SEXP dust_cpu_seir_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                         cpp11::sexp r_n_particles, size_t n_threads,
                         cpp11::sexp r_seed, bool deterministic,
                         cpp11::sexp gpu_config);

[[cpp11::register]]
SEXP dust_cpu_seir_run(SEXP ptr, size_t step_end);

[[cpp11::register]]
SEXP dust_cpu_seir_simulate(SEXP ptr, cpp11::sexp step_end);

[[cpp11::register]]
SEXP dust_cpu_seir_set_index(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_seir_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                SEXP r_step, SEXP r_set_initial_state);

[[cpp11::register]]
SEXP dust_cpu_seir_state(SEXP ptr, SEXP r_index);

[[cpp11::register]]
size_t dust_cpu_seir_step(SEXP ptr);

[[cpp11::register]]
void dust_cpu_seir_reorder(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_seir_resample(SEXP ptr, cpp11::doubles r_weights);

[[cpp11::register]]
SEXP dust_cpu_seir_rng_state(SEXP ptr, bool first_only, bool last_only);

[[cpp11::register]]
SEXP dust_cpu_seir_set_rng_state(SEXP ptr, cpp11::raws rng_state);

[[cpp11::register]]
SEXP dust_cpu_seir_set_data(SEXP ptr, cpp11::list data);

[[cpp11::register]]
SEXP dust_cpu_seir_compare_data(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_seir_filter(SEXP ptr, SEXP step_end,
                                     bool save_trajectories,
                                     cpp11::sexp step_snapshot,
                                     cpp11::sexp min_log_likelihood);

[[cpp11::register]]
void dust_cpu_seir_set_n_threads(SEXP ptr, int n_threads);

[[cpp11::register]]
int dust_cpu_seir_n_state(SEXP ptr);
#include <dust/r/dust.hpp>

// Generated by odin.dust (version 0.2.16) - do not edit
// [[dust::class(seir)]]
// [[dust::param(beta, has_default = TRUE, default_value = 0.2, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dt, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sigma, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class seir {
public:
  using real_type = double;
  using rng_state_type = dust::random::generator<real_type>;
  using data_type = dust::no_data;
  struct shared_type {
    real_type beta;
    real_type dt;
    real_type gamma;
    real_type initial_E;
    real_type initial_I;
    real_type initial_R;
    real_type initial_S;
    real_type initial_time;
    real_type p_EI;
    real_type p_IR;
    real_type sigma;
  };
  struct internal_type {
  };
  seir(const dust::pars_type<seir>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() {
    return 5;
  }
  std::vector<real_type> initial(size_t step) {
    std::vector<real_type> state(5);
    state[0] = shared->initial_time;
    state[1] = shared->initial_S;
    state[2] = shared->initial_E;
    state[3] = shared->initial_I;
    state[4] = shared->initial_R;
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type S = state[1];
    const real_type E = state[2];
    const real_type I = state[3];
    const real_type R = state[4];
    real_type N = S + E + I + R;
    state_next[0] = (step + 1) * shared->dt;
    real_type n_EI = dust::random::binomial<real_type>(rng_state, E, shared->p_EI);
    real_type n_IR = dust::random::binomial<real_type>(rng_state, I, shared->p_IR);
    real_type p_SE = 1 - std::exp(- shared->beta * I / (real_type) N * shared->dt);
    real_type n_SE = dust::random::binomial<real_type>(rng_state, S, p_SE);
    state_next[3] = I + n_EI - n_IR;
    state_next[4] = R + n_IR;
    state_next[2] = E + n_SE - n_EI;
    state_next[1] = S - n_SE;
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<seir> dust_pars<seir>(cpp11::list user) {
  using real_type = typename seir::real_type;
  auto shared = std::make_shared<seir::shared_type>();
  seir::internal_type internal;
  shared->initial_E = 10;
  shared->initial_I = 0;
  shared->initial_R = 0;
  shared->initial_S = 1000;
  shared->initial_time = 0;
  shared->beta = 0.20000000000000001;
  shared->dt = 1;
  shared->gamma = 0.10000000000000001;
  shared->sigma = 0.10000000000000001;
  shared->beta = user_get_scalar<real_type>(user, "beta", shared->beta, NA_REAL, NA_REAL);
  shared->dt = user_get_scalar<real_type>(user, "dt", shared->dt, NA_REAL, NA_REAL);
  shared->gamma = user_get_scalar<real_type>(user, "gamma", shared->gamma, NA_REAL, NA_REAL);
  shared->sigma = user_get_scalar<real_type>(user, "sigma", shared->sigma, NA_REAL, NA_REAL);
  shared->p_EI = 1 - std::exp(- shared->sigma * shared->dt);
  shared->p_IR = 1 - std::exp(- shared->gamma * shared->dt);
  return dust::pars_type<seir>(shared, internal);
}
template <>
cpp11::sexp dust_info<seir>(const dust::pars_type<seir>& pars) {
  const seir::internal_type internal = pars.internal;
  const std::shared_ptr<const seir::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"time", "S", "E", "I", "R"});
  cpp11::writable::list dim(5);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim.names() = nms;
  cpp11::writable::list index(5);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index.names() = nms;
  size_t len = 5;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}

cpp11::sexp dust_seir_capabilities() {
  return dust::r::dust_capabilities<seir>();
}

cpp11::sexp dust_seir_gpu_info() {
  return dust::gpu::r::gpu_info();
}
using model_cpu = dust::dust_cpu<seir>;

SEXP dust_cpu_seir_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                             cpp11::sexp r_n_particles, size_t n_threads,
                             cpp11::sexp r_seed, bool deterministic,
                             cpp11::sexp gpu_config) {
  return dust::r::dust_cpu_alloc<seir>(r_pars, pars_multi, step, r_n_particles,
                                        n_threads, r_seed, deterministic,
                                        gpu_config);
}

SEXP dust_cpu_seir_run(SEXP ptr, size_t step_end) {
  return dust::r::dust_run<model_cpu>(ptr, step_end);
}

SEXP dust_cpu_seir_simulate(SEXP ptr, cpp11::sexp step_end) {
  return dust::r::dust_simulate<model_cpu>(ptr, step_end);
}

SEXP dust_cpu_seir_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust::r::dust_set_index<model_cpu>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_cpu_seir_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                SEXP r_step, SEXP r_set_initial_state) {
  return dust::r::dust_update_state<model_cpu>(ptr, r_pars, r_state, r_step,
                                               r_set_initial_state);
}

SEXP dust_cpu_seir_state(SEXP ptr, SEXP r_index) {
  return dust::r::dust_state<model_cpu>(ptr, r_index);
}

size_t dust_cpu_seir_step(SEXP ptr) {
  return dust::r::dust_step<model_cpu>(ptr);
}

void dust_cpu_seir_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust::r::dust_reorder<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_seir_resample(SEXP ptr, cpp11::doubles r_weights) {
  return dust::r::dust_resample<model_cpu>(ptr, r_weights);
}

SEXP dust_cpu_seir_rng_state(SEXP ptr, bool first_only, bool last_only) {
  return dust::r::dust_rng_state<model_cpu>(ptr, first_only, last_only);
}

SEXP dust_cpu_seir_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust::r::dust_set_rng_state<model_cpu>(ptr, rng_state);
  return R_NilValue;
}

SEXP dust_cpu_seir_set_data(SEXP ptr, cpp11::list data) {
  dust::r::dust_set_data<model_cpu>(ptr, data);
  return R_NilValue;
}

SEXP dust_cpu_seir_compare_data(SEXP ptr) {
  return dust::r::dust_compare_data<model_cpu>(ptr);
}

SEXP dust_cpu_seir_filter(SEXP ptr, SEXP step_end,
                                     bool save_trajectories,
                                     cpp11::sexp step_snapshot,
                                     cpp11::sexp min_log_likelihood) {
  return dust::r::dust_filter<model_cpu>(ptr, step_end,
                                                save_trajectories,
                                                step_snapshot,
                                                min_log_likelihood);
}

void dust_cpu_seir_set_n_threads(SEXP ptr, int n_threads) {
  return dust::r::dust_set_n_threads<model_cpu>(ptr, n_threads);
}

int dust_cpu_seir_n_state(SEXP ptr) {
  return dust::r::dust_n_state<model_cpu>(ptr);
}
