// Generated by odin.dust (version 0.3.10) - do not edit
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum1(const container x, size_t from, size_t to);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12);
template <typename real_type, typename T, typename U>
__host__ __device__ real_type fintdiv(T x, U y) {
  return std::floor(x / y);
}

template <typename real_type, typename T, typename U>
__host__ __device__ real_type fmodr(T x, U y) {
  real_type tmp = std::fmod(static_cast<real_type>(x),
                            static_cast<real_type>(y));
  if (tmp * y < 0) {
    tmp += y;
  }
  return tmp;
}

// These exist to support the model on the gpu, as in C++14 std::min
// and std::max are constexpr and error without --expt-relaxed-constexpr
template <typename T>
__host__ __device__ T odin_min(T x, T y) {
  return x < y ? x : y;
}

template <typename T>
__host__ __device__ T odin_max(T x, T y) {
  return x > y ? x : y;
}

template <typename T>
__host__ __device__ T odin_sign(T x) {
  return (x > 0) ? 1 : ((x < 0) ? -1 : 0);
}
// [[dust::class(seirhdagevaxmultistrainsero)]]
// [[dust::time_type(discrete)]]
// [[dust::param(cross_immunity, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dt, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(index_dose, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(index_dose_inverse, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(m, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_age, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_doses, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_strains, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_vax, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_C, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_D, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_G, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_H, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rel_infectivity, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rel_p_death, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rel_p_hosp_if_sympt, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rel_p_sympt, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rel_susceptibility, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(seed_step_start, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(seed_value, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(strain_rel_p_death, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(strain_rel_p_hosp_if_sympt, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(strain_rel_p_sympt, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(strain_seed_step_start, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(strain_seed_value, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(strain_transmission, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vaccine_dose_step, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vaccine_progression_rate_base, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(waning_rate, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta, has_default = TRUE, default_value = 0.03, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_A, has_default = TRUE, default_value = 0.2, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_C, has_default = TRUE, default_value = 0.4, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_E, has_default = TRUE, default_value = 0.5, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_G, has_default = TRUE, default_value = list("/", 1L, 3L), rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_H, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_P, has_default = TRUE, default_value = 0.4, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_P_1, has_default = TRUE, default_value = list("/", 1L, 200L), rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_pre_1, has_default = TRUE, default_value = list("/", 1L, 13L), rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_P_1, has_default = TRUE, default_value = 0.85, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(seed_age, has_default = TRUE, default_value = 4L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(theta_A, has_default = TRUE, default_value = 0.5, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vaccine_catchup_fraction, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class seirhdagevaxmultistrainsero {
public:
  using real_type = double;
  using rng_state_type = dust::random::generator<real_type>;
  using data_type = dust::no_data;
  struct shared_type {
    real_type beta;
    std::vector<real_type> cross_immunity;
    int dim_cross_immunity;
    int dim_D;
    int dim_D_1;
    int dim_D_12;
    int dim_D_2;
    int dim_D_3;
    int dim_E;
    int dim_E_1;
    int dim_E_12;
    int dim_E_2;
    int dim_E_3;
    int dim_G;
    int dim_G_1;
    int dim_G_12;
    int dim_G_2;
    int dim_G_3;
    int dim_H;
    int dim_H_1;
    int dim_H_12;
    int dim_H_2;
    int dim_H_3;
    int dim_I_A;
    int dim_I_A_1;
    int dim_I_A_12;
    int dim_I_A_2;
    int dim_I_A_3;
    int dim_I_C;
    int dim_I_C_1;
    int dim_I_C_12;
    int dim_I_C_2;
    int dim_I_C_3;
    int dim_I_P;
    int dim_I_P_1;
    int dim_I_P_12;
    int dim_I_P_2;
    int dim_I_P_3;
    int dim_I_rel_inf;
    int dim_I_rel_inf_1;
    int dim_I_rel_inf_12;
    int dim_I_rel_inf_2;
    int dim_I_rel_inf_3;
    int dim_index_dose;
    int dim_index_dose_inverse;
    int dim_lambda;
    int dim_lambda_1;
    int dim_lambda_2;
    int dim_lambda_sus;
    int dim_lambda_sus_1;
    int dim_lambda_sus_12;
    int dim_lambda_sus_2;
    int dim_lambda_sus_3;
    int dim_m;
    int dim_m_1;
    int dim_m_2;
    int dim_n_EI;
    int dim_n_EI_1;
    int dim_n_EI_12;
    int dim_n_EI_2;
    int dim_n_EI_3;
    int dim_n_EI_A;
    int dim_n_EI_A_1;
    int dim_n_EI_A_12;
    int dim_n_EI_A_2;
    int dim_n_EI_A_3;
    int dim_n_EI_P;
    int dim_n_EI_P_1;
    int dim_n_EI_P_12;
    int dim_n_EI_P_2;
    int dim_n_EI_P_3;
    int dim_n_EV;
    int dim_n_EV_1;
    int dim_n_EV_12;
    int dim_n_EV_2;
    int dim_n_EV_3;
    int dim_n_GD;
    int dim_n_GD_1;
    int dim_n_GD_12;
    int dim_n_GD_2;
    int dim_n_GD_3;
    int dim_n_HD;
    int dim_n_HD_1;
    int dim_n_HD_12;
    int dim_n_HD_2;
    int dim_n_HD_3;
    int dim_n_HR;
    int dim_n_HR_1;
    int dim_n_HR_12;
    int dim_n_HR_2;
    int dim_n_HR_3;
    int dim_n_Hx;
    int dim_n_Hx_1;
    int dim_n_Hx_12;
    int dim_n_Hx_2;
    int dim_n_Hx_3;
    int dim_n_I_AR;
    int dim_n_I_AR_1;
    int dim_n_I_AR_12;
    int dim_n_I_AR_2;
    int dim_n_I_AR_3;
    int dim_n_I_AV;
    int dim_n_I_AV_1;
    int dim_n_I_AV_12;
    int dim_n_I_AV_2;
    int dim_n_I_AV_3;
    int dim_n_I_CG;
    int dim_n_I_CG_1;
    int dim_n_I_CG_12;
    int dim_n_I_CG_2;
    int dim_n_I_CG_3;
    int dim_n_I_CH;
    int dim_n_I_CH_1;
    int dim_n_I_CH_12;
    int dim_n_I_CH_2;
    int dim_n_I_CH_3;
    int dim_n_I_CHG;
    int dim_n_I_CHG_1;
    int dim_n_I_CHG_12;
    int dim_n_I_CHG_2;
    int dim_n_I_CHG_3;
    int dim_n_I_CR;
    int dim_n_I_CR_1;
    int dim_n_I_CR_12;
    int dim_n_I_CR_2;
    int dim_n_I_CR_3;
    int dim_n_I_Cx;
    int dim_n_I_Cx_1;
    int dim_n_I_Cx_12;
    int dim_n_I_Cx_2;
    int dim_n_I_Cx_3;
    int dim_n_I_PI_C;
    int dim_n_I_PI_C_1;
    int dim_n_I_PI_C_12;
    int dim_n_I_PI_C_2;
    int dim_n_I_PI_C_3;
    int dim_n_I_PV;
    int dim_n_I_PV_1;
    int dim_n_I_PV_12;
    int dim_n_I_PV_2;
    int dim_n_I_PV_3;
    int dim_n_RE;
    int dim_n_RE_1;
    int dim_n_RE_12;
    int dim_n_RE_2;
    int dim_n_RE_3;
    int dim_n_RS;
    int dim_n_RS_1;
    int dim_n_RS_12;
    int dim_n_RS_2;
    int dim_n_RS_3;
    int dim_n_RV;
    int dim_n_RV_1;
    int dim_n_RV_12;
    int dim_n_RV_2;
    int dim_n_RV_3;
    int dim_n_Rx;
    int dim_n_Rx_1;
    int dim_n_Rx_12;
    int dim_n_Rx_2;
    int dim_n_Rx_3;
    int dim_n_SE;
    int dim_n_SE_1;
    int dim_n_SE_12;
    int dim_n_SE_2;
    int dim_n_SE_3;
    int dim_n_SE_tot;
    int dim_n_SE_tot_1;
    int dim_n_SE_tot_2;
    int dim_n_SV;
    int dim_n_SV_1;
    int dim_n_SV_2;
    int dim_n_T_P_1T_N_1;
    int dim_n_T_P_1T_N_1_1;
    int dim_n_T_P_1T_N_1_12;
    int dim_n_T_P_1T_N_1_2;
    int dim_n_T_P_1T_N_1_3;
    int dim_n_T_pre_1T_P_1;
    int dim_n_T_pre_1T_P_1_1;
    int dim_n_T_pre_1T_P_1_12;
    int dim_n_T_pre_1T_P_1_2;
    int dim_n_T_pre_1T_P_1_3;
    int dim_n_T_pre_1x;
    int dim_n_T_pre_1x_1;
    int dim_n_T_pre_1x_12;
    int dim_n_T_pre_1x_2;
    int dim_n_T_pre_1x_3;
    int dim_N_tot;
    int dim_n_V;
    int dim_n_V_1;
    int dim_n_V_2;
    int dim_p_C;
    int dim_p_D;
    int dim_p_EV;
    int dim_p_EV_1;
    int dim_p_EV_12;
    int dim_p_EV_2;
    int dim_p_EV_3;
    int dim_p_G;
    int dim_p_H;
    int dim_p_I_AV;
    int dim_p_I_AV_1;
    int dim_p_I_AV_12;
    int dim_p_I_AV_2;
    int dim_p_I_AV_3;
    int dim_p_I_PV;
    int dim_p_I_PV_1;
    int dim_p_I_PV_12;
    int dim_p_I_PV_2;
    int dim_p_I_PV_3;
    int dim_p_RS;
    int dim_p_RS_1;
    int dim_p_RS_12;
    int dim_p_RS_2;
    int dim_p_RS_3;
    int dim_p_RV;
    int dim_p_RV_1;
    int dim_p_RV_12;
    int dim_p_RV_2;
    int dim_p_RV_3;
    int dim_p_Rx;
    int dim_p_Rx_1;
    int dim_p_Rx_12;
    int dim_p_Rx_2;
    int dim_p_Rx_3;
    int dim_p_SE;
    int dim_p_SE_1;
    int dim_p_SE_2;
    int dim_p_SV;
    int dim_p_SV_1;
    int dim_p_SV_2;
    int dim_p_V;
    int dim_p_V_1;
    int dim_p_V_2;
    int dim_R;
    int dim_R_1;
    int dim_R_12;
    int dim_R_2;
    int dim_R_3;
    int dim_rate_Rx;
    int dim_rate_Rx_1;
    int dim_rate_Rx_12;
    int dim_rate_Rx_2;
    int dim_rate_Rx_3;
    int dim_rel_foi_strain;
    int dim_rel_foi_strain_1;
    int dim_rel_foi_strain_12;
    int dim_rel_foi_strain_2;
    int dim_rel_foi_strain_3;
    int dim_rel_infectivity;
    int dim_rel_infectivity_1;
    int dim_rel_infectivity_12;
    int dim_rel_infectivity_2;
    int dim_rel_infectivity_3;
    int dim_rel_p_death;
    int dim_rel_p_death_1;
    int dim_rel_p_death_12;
    int dim_rel_p_death_2;
    int dim_rel_p_death_3;
    int dim_rel_p_hosp_if_sympt;
    int dim_rel_p_hosp_if_sympt_1;
    int dim_rel_p_hosp_if_sympt_12;
    int dim_rel_p_hosp_if_sympt_2;
    int dim_rel_p_hosp_if_sympt_3;
    int dim_rel_p_sympt;
    int dim_rel_p_sympt_1;
    int dim_rel_p_sympt_12;
    int dim_rel_p_sympt_2;
    int dim_rel_p_sympt_3;
    int dim_rel_susceptibility;
    int dim_rel_susceptibility_1;
    int dim_rel_susceptibility_12;
    int dim_rel_susceptibility_2;
    int dim_rel_susceptibility_3;
    int dim_S;
    int dim_S_1;
    int dim_S_2;
    int dim_s_ij;
    int dim_s_ij_1;
    int dim_s_ij_12;
    int dim_s_ij_2;
    int dim_s_ij_3;
    int dim_seed_value;
    int dim_strain_rel_p_death;
    int dim_strain_rel_p_hosp_if_sympt;
    int dim_strain_rel_p_sympt;
    int dim_strain_seed_value;
    int dim_strain_transmission;
    int dim_T_N_1;
    int dim_T_N_1_1;
    int dim_T_N_1_12;
    int dim_T_N_1_2;
    int dim_T_N_1_3;
    int dim_T_P_1;
    int dim_T_P_1_1;
    int dim_T_P_1_12;
    int dim_T_P_1_2;
    int dim_T_P_1_3;
    int dim_T_pre_1;
    int dim_T_pre_1_1;
    int dim_T_pre_1_12;
    int dim_T_pre_1_2;
    int dim_T_pre_1_3;
    int dim_total_attempted_doses;
    int dim_total_attempted_doses_1;
    int dim_total_attempted_doses_2;
    int dim_vaccine_attempted_doses;
    int dim_vaccine_attempted_doses_1;
    int dim_vaccine_attempted_doses_2;
    int dim_vaccine_dose_step;
    int dim_vaccine_dose_step_1;
    int dim_vaccine_dose_step_12;
    int dim_vaccine_dose_step_2;
    int dim_vaccine_dose_step_3;
    int dim_vaccine_missed_doses;
    int dim_vaccine_missed_doses_1;
    int dim_vaccine_missed_doses_2;
    int dim_vaccine_n_candidates;
    int dim_vaccine_n_candidates_1;
    int dim_vaccine_n_candidates_2;
    int dim_vaccine_probability_doses;
    int dim_vaccine_probability_doses_1;
    int dim_vaccine_probability_doses_2;
    int dim_vaccine_progression_rate_base;
    int dim_vaccine_progression_rate_base_1;
    int dim_vaccine_progression_rate_base_2;
    real_type dt;
    real_type gamma_A;
    real_type gamma_C;
    real_type gamma_E;
    real_type gamma_G;
    real_type gamma_H;
    real_type gamma_P;
    real_type gamma_P_1;
    real_type gamma_pre_1;
    std::vector<int> index_dose;
    std::vector<int> index_dose_inverse;
    std::vector<real_type> initial_D;
    real_type initial_D_inc;
    real_type initial_D_inc_0_39;
    real_type initial_D_inc_40_49;
    real_type initial_D_inc_50_59;
    real_type initial_D_inc_60_69;
    real_type initial_D_inc_70_plus;
    std::vector<real_type> initial_E;
    std::vector<real_type> initial_G;
    std::vector<real_type> initial_H;
    real_type initial_H_inc;
    real_type initial_H_inc_0_39;
    real_type initial_H_inc_40_49;
    real_type initial_H_inc_50_59;
    real_type initial_H_inc_60_69;
    real_type initial_H_inc_70_plus;
    std::vector<real_type> initial_I_A;
    std::vector<real_type> initial_I_C;
    std::vector<real_type> initial_I_P;
    std::vector<real_type> initial_N_tot;
    std::vector<real_type> initial_R;
    std::vector<real_type> initial_S;
    real_type initial_sero_pos_1;
    real_type initial_sero_pos_1_20_29;
    real_type initial_sero_pos_1_30_39;
    real_type initial_sero_pos_1_40_49;
    real_type initial_sero_pos_1_50_59;
    real_type initial_sero_pos_1_60_69;
    real_type initial_sero_pos_1_70_plus;
    std::vector<real_type> initial_T_N_1;
    std::vector<real_type> initial_T_P_1;
    std::vector<real_type> initial_T_pre_1;
    real_type initial_time;
    std::vector<real_type> initial_vaccine_missed_doses;
    std::vector<real_type> m;
    int n_age;
    int n_doses;
    int n_real_strains;
    int n_strains;
    int n_vax;
    int offset_variable_D;
    int offset_variable_E;
    int offset_variable_G;
    int offset_variable_H;
    int offset_variable_I_A;
    int offset_variable_I_C;
    int offset_variable_I_P;
    int offset_variable_R;
    int offset_variable_S;
    int offset_variable_T_N_1;
    int offset_variable_T_P_1;
    int offset_variable_T_pre_1;
    int offset_variable_vaccine_missed_doses;
    std::vector<real_type> p_C;
    std::vector<real_type> p_D;
    real_type p_EI;
    std::vector<real_type> p_G;
    real_type p_GD;
    std::vector<real_type> p_H;
    real_type p_Hx;
    real_type p_I_AR;
    real_type p_I_Cx;
    real_type p_I_PI_C;
    real_type p_P_1;
    real_type p_T_P_1T_N_1;
    real_type p_T_pre_1x;
    std::vector<real_type> rel_infectivity;
    std::vector<real_type> rel_p_death;
    std::vector<real_type> rel_p_hosp_if_sympt;
    std::vector<real_type> rel_p_sympt;
    std::vector<real_type> rel_susceptibility;
    int seed_age;
    real_type seed_step_end;
    real_type seed_step_start;
    std::vector<real_type> seed_value;
    real_type steps_per_day;
    std::vector<real_type> strain_rel_p_death;
    std::vector<real_type> strain_rel_p_hosp_if_sympt;
    std::vector<real_type> strain_rel_p_sympt;
    real_type strain_seed_step_end;
    real_type strain_seed_step_start;
    std::vector<real_type> strain_seed_value;
    std::vector<real_type> strain_transmission;
    real_type theta_A;
    real_type vaccine_catchup_fraction;
    std::vector<real_type> vaccine_dose_step;
    std::vector<real_type> vaccine_progression_rate_base;
    real_type waning_rate;
  };
  struct internal_type {
    std::vector<real_type> I_rel_inf;
    std::vector<real_type> lambda;
    std::vector<real_type> lambda_sus;
    std::vector<real_type> n_EI;
    std::vector<real_type> n_EI_A;
    std::vector<real_type> n_EI_P;
    std::vector<real_type> n_EV;
    std::vector<real_type> n_GD;
    std::vector<real_type> n_HD;
    std::vector<real_type> n_HR;
    std::vector<real_type> n_Hx;
    std::vector<real_type> n_I_AR;
    std::vector<real_type> n_I_AV;
    std::vector<real_type> n_I_CG;
    std::vector<real_type> n_I_CH;
    std::vector<real_type> n_I_CHG;
    std::vector<real_type> n_I_CR;
    std::vector<real_type> n_I_Cx;
    std::vector<real_type> n_I_PI_C;
    std::vector<real_type> n_I_PV;
    std::vector<real_type> n_RE;
    std::vector<real_type> n_RS;
    std::vector<real_type> n_RV;
    std::vector<real_type> n_Rx;
    std::vector<real_type> n_SE;
    std::vector<real_type> n_SE_tot;
    std::vector<real_type> n_SV;
    std::vector<real_type> n_T_P_1T_N_1;
    std::vector<real_type> n_T_pre_1T_P_1;
    std::vector<real_type> n_T_pre_1x;
    std::vector<real_type> n_V;
    std::vector<real_type> p_EV;
    std::vector<real_type> p_I_AV;
    std::vector<real_type> p_I_PV;
    std::vector<real_type> p_RS;
    std::vector<real_type> p_RV;
    std::vector<real_type> p_Rx;
    std::vector<real_type> p_SE;
    std::vector<real_type> p_SV;
    std::vector<real_type> p_V;
    std::vector<real_type> rate_Rx;
    std::vector<real_type> rel_foi_strain;
    std::vector<real_type> s_ij;
    std::vector<real_type> total_attempted_doses;
    std::vector<real_type> vaccine_attempted_doses;
    std::vector<real_type> vaccine_n_candidates;
    std::vector<real_type> vaccine_probability_doses;
  };
  seirhdagevaxmultistrainsero(const dust::pars_type<seirhdagevaxmultistrainsero>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() const {
    return shared->dim_D + shared->dim_E + shared->dim_G + shared->dim_H + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_R + shared->dim_S + shared->dim_T_N_1 + shared->dim_T_P_1 + shared->dim_T_pre_1 + shared->dim_vaccine_missed_doses + 20;
  }
  std::vector<real_type> initial(size_t step, rng_state_type& rng_state) {
    std::vector<real_type> state(shared->dim_D + shared->dim_E + shared->dim_G + shared->dim_H + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_R + shared->dim_S + shared->dim_T_N_1 + shared->dim_T_P_1 + shared->dim_T_pre_1 + shared->dim_vaccine_missed_doses + 20);
    state[0] = shared->initial_time;
    state[1] = shared->initial_H_inc;
    state[2] = shared->initial_D_inc;
    state[3] = shared->initial_H_inc_0_39;
    state[4] = shared->initial_H_inc_40_49;
    state[5] = shared->initial_H_inc_50_59;
    state[6] = shared->initial_H_inc_60_69;
    state[7] = shared->initial_H_inc_70_plus;
    state[8] = shared->initial_D_inc_0_39;
    state[9] = shared->initial_D_inc_40_49;
    state[10] = shared->initial_D_inc_50_59;
    state[11] = shared->initial_D_inc_60_69;
    state[12] = shared->initial_D_inc_70_plus;
    state[13] = shared->initial_sero_pos_1;
    state[14] = shared->initial_sero_pos_1_20_29;
    state[15] = shared->initial_sero_pos_1_30_39;
    state[16] = shared->initial_sero_pos_1_40_49;
    state[17] = shared->initial_sero_pos_1_50_59;
    state[18] = shared->initial_sero_pos_1_60_69;
    state[19] = shared->initial_sero_pos_1_70_plus;
    std::copy(shared->initial_N_tot.begin(), shared->initial_N_tot.end(), state.begin() + 20);
    std::copy(shared->initial_S.begin(), shared->initial_S.end(), state.begin() + shared->offset_variable_S);
    std::copy(shared->initial_vaccine_missed_doses.begin(), shared->initial_vaccine_missed_doses.end(), state.begin() + shared->offset_variable_vaccine_missed_doses);
    std::copy(shared->initial_E.begin(), shared->initial_E.end(), state.begin() + shared->offset_variable_E);
    std::copy(shared->initial_I_P.begin(), shared->initial_I_P.end(), state.begin() + shared->offset_variable_I_P);
    std::copy(shared->initial_I_A.begin(), shared->initial_I_A.end(), state.begin() + shared->offset_variable_I_A);
    std::copy(shared->initial_I_C.begin(), shared->initial_I_C.end(), state.begin() + shared->offset_variable_I_C);
    std::copy(shared->initial_R.begin(), shared->initial_R.end(), state.begin() + shared->offset_variable_R);
    std::copy(shared->initial_H.begin(), shared->initial_H.end(), state.begin() + shared->offset_variable_H);
    std::copy(shared->initial_G.begin(), shared->initial_G.end(), state.begin() + shared->offset_variable_G);
    std::copy(shared->initial_D.begin(), shared->initial_D.end(), state.begin() + shared->offset_variable_D);
    std::copy(shared->initial_T_pre_1.begin(), shared->initial_T_pre_1.end(), state.begin() + shared->offset_variable_T_pre_1);
    std::copy(shared->initial_T_P_1.begin(), shared->initial_T_P_1.end(), state.begin() + shared->offset_variable_T_P_1);
    std::copy(shared->initial_T_N_1.begin(), shared->initial_T_N_1.end(), state.begin() + shared->offset_variable_T_N_1);
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type * S = state + shared->offset_variable_S;
    const real_type * E = state + shared->offset_variable_E;
    const real_type * I_P = state + shared->offset_variable_I_P;
    const real_type * I_A = state + shared->offset_variable_I_A;
    const real_type * I_C = state + shared->offset_variable_I_C;
    const real_type * R = state + shared->offset_variable_R;
    const real_type * H = state + shared->offset_variable_H;
    const real_type * G = state + shared->offset_variable_G;
    const real_type * D = state + shared->offset_variable_D;
    const real_type * T_pre_1 = state + shared->offset_variable_T_pre_1;
    const real_type * T_P_1 = state + shared->offset_variable_T_P_1;
    const real_type * T_N_1 = state + shared->offset_variable_T_N_1;
    const real_type H_inc = state[1];
    const real_type D_inc = state[2];
    const real_type H_inc_0_39 = state[3];
    const real_type H_inc_40_49 = state[4];
    const real_type H_inc_50_59 = state[5];
    const real_type H_inc_60_69 = state[6];
    const real_type H_inc_70_plus = state[7];
    const real_type D_inc_0_39 = state[8];
    const real_type D_inc_40_49 = state[9];
    const real_type D_inc_50_59 = state[10];
    const real_type D_inc_60_69 = state[11];
    const real_type D_inc_70_plus = state[12];
    const real_type * vaccine_missed_doses = state + shared->offset_variable_vaccine_missed_doses;
    state_next[0] = (step + 1) * shared->dt;
    real_type seed_rate = (step >= shared->seed_step_start && step < shared->seed_step_end ? shared->seed_value[static_cast<int>(step - shared->seed_step_start + 1) - 1] : 0);
    real_type strain_seed_rate = (step >= shared->strain_seed_step_start && step < shared->strain_seed_step_end ? shared->strain_seed_value[static_cast<int>(step - shared->strain_seed_step_start + 1) - 1] : 0);
    for (int i = 1; i <= shared->dim_N_tot; ++i) {
      state_next[20 + i - 1] = odin_sum2<real_type>(S, i - 1, i, 0, shared->dim_S_2, shared->dim_S_1) + odin_sum3<real_type>(E, i - 1, i, 0, shared->dim_E_2, 0, shared->dim_E_3, shared->dim_E_1, shared->dim_E_12) + odin_sum3<real_type>(I_P, i - 1, i, 0, shared->dim_I_P_2, 0, shared->dim_I_P_3, shared->dim_I_P_1, shared->dim_I_P_12) + odin_sum3<real_type>(I_A, i - 1, i, 0, shared->dim_I_A_2, 0, shared->dim_I_A_3, shared->dim_I_A_1, shared->dim_I_A_12) + odin_sum3<real_type>(I_C, i - 1, i, 0, shared->dim_I_C_2, 0, shared->dim_I_C_3, shared->dim_I_C_1, shared->dim_I_C_12) + odin_sum3<real_type>(R, i - 1, i, 0, shared->dim_R_2, 0, shared->dim_R_3, shared->dim_R_1, shared->dim_R_12) + odin_sum3<real_type>(H, i - 1, i, 0, shared->dim_H_2, 0, shared->dim_H_3, shared->dim_H_1, shared->dim_H_12) + odin_sum3<real_type>(G, i - 1, i, 0, shared->dim_G_2, 0, shared->dim_G_3, shared->dim_G_1, shared->dim_G_12) + odin_sum3<real_type>(D, i - 1, i, 0, shared->dim_D_2, 0, shared->dim_D_3, shared->dim_D_1, shared->dim_D_12);
    }
    for (int i = 1; i <= shared->dim_I_rel_inf_1; ++i) {
      for (int j = 1; j <= shared->dim_I_rel_inf_2; ++j) {
        for (int k = 1; k <= shared->dim_I_rel_inf_3; ++k) {
          internal.I_rel_inf[i - 1 + shared->dim_I_rel_inf_1 * (j - 1) + shared->dim_I_rel_inf_12 * (k - 1)] = shared->rel_infectivity[shared->dim_rel_infectivity_12 * (k - 1) + shared->dim_rel_infectivity_1 * (j - 1) + i - 1] * shared->strain_transmission[j - 1] * (shared->theta_A * I_A[shared->dim_I_A_12 * (k - 1) + shared->dim_I_A_1 * (j - 1) + i - 1] + I_P[shared->dim_I_P_12 * (k - 1) + shared->dim_I_P_1 * (j - 1) + i - 1] + I_C[shared->dim_I_C_12 * (k - 1) + shared->dim_I_C_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_EI_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EI_2; ++j) {
        for (int k = 1; k <= shared->dim_n_EI_3; ++k) {
          internal.n_EI[i - 1 + shared->dim_n_EI_1 * (j - 1) + shared->dim_n_EI_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, E[shared->dim_E_12 * (k - 1) + shared->dim_E_1 * (j - 1) + i - 1], shared->p_EI);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_GD_1; ++i) {
      for (int j = 1; j <= shared->dim_n_GD_2; ++j) {
        for (int k = 1; k <= shared->dim_n_GD_3; ++k) {
          internal.n_GD[i - 1 + shared->dim_n_GD_1 * (j - 1) + shared->dim_n_GD_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, G[shared->dim_G_12 * (k - 1) + shared->dim_G_1 * (j - 1) + i - 1], shared->p_GD);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_Hx_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Hx_2; ++j) {
        for (int k = 1; k <= shared->dim_n_Hx_3; ++k) {
          internal.n_Hx[i - 1 + shared->dim_n_Hx_1 * (j - 1) + shared->dim_n_Hx_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, H[shared->dim_H_12 * (k - 1) + shared->dim_H_1 * (j - 1) + i - 1], shared->p_Hx);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_AR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_AR_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_AR_3; ++k) {
          internal.n_I_AR[i - 1 + shared->dim_n_I_AR_1 * (j - 1) + shared->dim_n_I_AR_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_A[shared->dim_I_A_12 * (k - 1) + shared->dim_I_A_1 * (j - 1) + i - 1], shared->p_I_AR);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_Cx_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_Cx_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_Cx_3; ++k) {
          internal.n_I_Cx[i - 1 + shared->dim_n_I_Cx_1 * (j - 1) + shared->dim_n_I_Cx_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_C[shared->dim_I_C_12 * (k - 1) + shared->dim_I_C_1 * (j - 1) + i - 1], shared->p_I_Cx);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_PI_C_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_PI_C_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_PI_C_3; ++k) {
          internal.n_I_PI_C[i - 1 + shared->dim_n_I_PI_C_1 * (j - 1) + shared->dim_n_I_PI_C_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_P[shared->dim_I_P_12 * (k - 1) + shared->dim_I_P_1 * (j - 1) + i - 1], shared->p_I_PI_C);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_T_P_1T_N_1_1; ++i) {
      for (int j = 1; j <= shared->dim_n_T_P_1T_N_1_2; ++j) {
        for (int k = 1; k <= shared->dim_n_T_P_1T_N_1_3; ++k) {
          internal.n_T_P_1T_N_1[i - 1 + shared->dim_n_T_P_1T_N_1_1 * (j - 1) + shared->dim_n_T_P_1T_N_1_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, T_P_1[shared->dim_T_P_1_12 * (k - 1) + shared->dim_T_P_1_1 * (j - 1) + i - 1], shared->p_T_P_1T_N_1);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_T_pre_1x_1; ++i) {
      for (int j = 1; j <= shared->dim_n_T_pre_1x_2; ++j) {
        for (int k = 1; k <= shared->dim_n_T_pre_1x_3; ++k) {
          internal.n_T_pre_1x[i - 1 + shared->dim_n_T_pre_1x_1 * (j - 1) + shared->dim_n_T_pre_1x_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, T_pre_1[shared->dim_T_pre_1_12 * (k - 1) + shared->dim_T_pre_1_1 * (j - 1) + i - 1], shared->p_T_pre_1x);
        }
      }
    }
    real_type seed = dust::random::poisson<real_type>(rng_state, seed_rate);
    real_type strain_seed = dust::random::poisson<real_type>(rng_state, strain_seed_rate);
    for (int i = 1; i <= shared->dim_total_attempted_doses_1; ++i) {
      for (int j = 1; j <= shared->dim_total_attempted_doses_2; ++j) {
        internal.total_attempted_doses[i - 1 + shared->dim_total_attempted_doses_1 * (j - 1)] = vaccine_missed_doses[shared->dim_vaccine_missed_doses_1 * (j - 1) + i - 1] + ((static_cast<int>(step) >= shared->dim_vaccine_dose_step_3 ? 0 : shared->vaccine_dose_step[shared->dim_vaccine_dose_step_12 * (step + 1 - 1) + shared->dim_vaccine_dose_step_1 * (j - 1) + i - 1]));
      }
    }
    for (int i = 1; i <= shared->dim_vaccine_n_candidates_1; ++i) {
      for (int j = 1; j <= shared->dim_vaccine_n_candidates_2; ++j) {
        internal.vaccine_n_candidates[i - 1 + shared->dim_vaccine_n_candidates_1 * (j - 1)] = S[shared->dim_S_1 * (shared->index_dose[j - 1] - 1) + i - 1] + odin_sum3<real_type>(E, i - 1, i, 0, shared->dim_E_2, shared->index_dose[j - 1] - 1, shared->index_dose[j - 1], shared->dim_E_1, shared->dim_E_12) + odin_sum3<real_type>(I_A, i - 1, i, 0, shared->dim_I_A_2, shared->index_dose[j - 1] - 1, shared->index_dose[j - 1], shared->dim_I_A_1, shared->dim_I_A_12) + odin_sum3<real_type>(I_P, i - 1, i, 0, shared->dim_I_P_2, shared->index_dose[j - 1] - 1, shared->index_dose[j - 1], shared->dim_I_P_1, shared->dim_I_P_12) + odin_sum3<real_type>(R, i - 1, i, 0, shared->dim_R_2, shared->index_dose[j - 1] - 1, shared->index_dose[j - 1], shared->dim_R_1, shared->dim_R_12);
      }
    }
    for (int i = 1; i <= shared->dim_n_EI_P_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EI_P_2; ++j) {
        for (int k = 1; k <= shared->dim_n_EI_P_3; ++k) {
          internal.n_EI_P[i - 1 + shared->dim_n_EI_P_1 * (j - 1) + shared->dim_n_EI_P_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_EI[shared->dim_n_EI_12 * (k - 1) + shared->dim_n_EI_1 * (j - 1) + i - 1], shared->rel_p_sympt[shared->dim_rel_p_sympt_12 * (k - 1) + shared->dim_rel_p_sympt_1 * (j - 1) + i - 1] * shared->strain_rel_p_sympt[j - 1] * shared->p_C[i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_HD_1; ++i) {
      for (int j = 1; j <= shared->dim_n_HD_2; ++j) {
        for (int k = 1; k <= shared->dim_n_HD_3; ++k) {
          internal.n_HD[i - 1 + shared->dim_n_HD_1 * (j - 1) + shared->dim_n_HD_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_Hx[shared->dim_n_Hx_12 * (k - 1) + shared->dim_n_Hx_1 * (j - 1) + i - 1], shared->rel_p_death[shared->dim_rel_p_death_12 * (k - 1) + shared->dim_rel_p_death_1 * (j - 1) + i - 1] * shared->strain_rel_p_death[j - 1] * shared->p_D[i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_CR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_CR_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_CR_3; ++k) {
          internal.n_I_CR[i - 1 + shared->dim_n_I_CR_1 * (j - 1) + shared->dim_n_I_CR_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_I_Cx[shared->dim_n_I_Cx_12 * (k - 1) + shared->dim_n_I_Cx_1 * (j - 1) + i - 1], 1 - shared->rel_p_hosp_if_sympt[shared->dim_rel_p_hosp_if_sympt_12 * (k - 1) + shared->dim_rel_p_hosp_if_sympt_1 * (j - 1) + i - 1] * shared->strain_rel_p_hosp_if_sympt[j - 1] * shared->p_H[i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_T_pre_1T_P_1_1; ++i) {
      for (int j = 1; j <= shared->dim_n_T_pre_1T_P_1_2; ++j) {
        for (int k = 1; k <= shared->dim_n_T_pre_1T_P_1_3; ++k) {
          internal.n_T_pre_1T_P_1[i - 1 + shared->dim_n_T_pre_1T_P_1_1 * (j - 1) + shared->dim_n_T_pre_1T_P_1_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_T_pre_1x[shared->dim_n_T_pre_1x_12 * (k - 1) + shared->dim_n_T_pre_1x_1 * (j - 1) + i - 1], shared->p_P_1);
        }
      }
    }
    for (int i = 1; i <= shared->dim_s_ij_1; ++i) {
      for (int j = 1; j <= shared->dim_s_ij_2; ++j) {
        for (int k = 1; k <= shared->dim_s_ij_3; ++k) {
          internal.s_ij[i - 1 + shared->dim_s_ij_1 * (j - 1) + shared->dim_s_ij_12 * (k - 1)] = shared->m[shared->dim_m_1 * (j - 1) + i - 1] * odin_sum3<real_type>(internal.I_rel_inf.data(), j - 1, j, k - 1, k, 0, shared->dim_I_rel_inf_3, shared->dim_I_rel_inf_1, shared->dim_I_rel_inf_12);
        }
      }
    }
    for (int i = 1; i <= shared->dim_I_C_1; ++i) {
      for (int j = 1; j <= shared->dim_I_C_2; ++j) {
        for (int k = 1; k <= shared->dim_I_C_3; ++k) {
          state_next[shared->offset_variable_I_C + i - 1 + shared->dim_I_C_1 * (j - 1) + shared->dim_I_C_12 * (k - 1)] = I_C[shared->dim_I_C_12 * (k - 1) + shared->dim_I_C_1 * (j - 1) + i - 1] + internal.n_I_PI_C[shared->dim_n_I_PI_C_12 * (k - 1) + shared->dim_n_I_PI_C_1 * (j - 1) + i - 1] - internal.n_I_Cx[shared->dim_n_I_Cx_12 * (k - 1) + shared->dim_n_I_Cx_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_T_pre_1_1; ++i) {
      for (int j = 1; j <= shared->dim_T_pre_1_2; ++j) {
        for (int k = 1; k <= shared->dim_T_pre_1_3; ++k) {
          state_next[shared->offset_variable_T_pre_1 + i - 1 + shared->dim_T_pre_1_1 * (j - 1) + shared->dim_T_pre_1_12 * (k - 1)] = T_pre_1[shared->dim_T_pre_1_12 * (k - 1) + shared->dim_T_pre_1_1 * (j - 1) + i - 1] + internal.n_EI[shared->dim_n_EI_12 * (k - 1) + shared->dim_n_EI_1 * (j - 1) + i - 1] - internal.n_T_pre_1x[shared->dim_n_T_pre_1x_12 * (k - 1) + shared->dim_n_T_pre_1x_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_vaccine_attempted_doses_1; ++i) {
      for (int j = 1; j <= shared->dim_vaccine_attempted_doses_2; ++j) {
        internal.vaccine_attempted_doses[i - 1 + shared->dim_vaccine_attempted_doses_1 * (j - 1)] = internal.total_attempted_doses[shared->dim_total_attempted_doses_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_lambda_1; ++i) {
      for (int j = 1; j <= shared->dim_lambda_2; ++j) {
        internal.lambda[i - 1 + shared->dim_lambda_1 * (j - 1)] = shared->beta * ((shared->n_real_strains == 1 ? odin_sum3<real_type>(internal.s_ij.data(), i - 1, i, 0, shared->dim_s_ij_2, 0, 1, shared->dim_s_ij_1, shared->dim_s_ij_12) : ((j == 1 ? odin_sum3<real_type>(internal.s_ij.data(), i - 1, i, 0, shared->dim_s_ij_2, 0, 1, shared->dim_s_ij_1, shared->dim_s_ij_12) + odin_sum3<real_type>(internal.s_ij.data(), i - 1, i, 0, shared->dim_s_ij_2, 3, 4, shared->dim_s_ij_1, shared->dim_s_ij_12) : odin_sum3<real_type>(internal.s_ij.data(), i - 1, i, 0, shared->dim_s_ij_2, 1, 2, shared->dim_s_ij_1, shared->dim_s_ij_12) + odin_sum3<real_type>(internal.s_ij.data(), i - 1, i, 0, shared->dim_s_ij_2, 2, 3, shared->dim_s_ij_1, shared->dim_s_ij_12)))));
      }
    }
    for (int i = 1; i <= shared->dim_n_EI_A_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EI_A_2; ++j) {
        for (int k = 1; k <= shared->dim_n_EI_A_3; ++k) {
          internal.n_EI_A[i - 1 + shared->dim_n_EI_A_1 * (j - 1) + shared->dim_n_EI_A_12 * (k - 1)] = internal.n_EI[shared->dim_n_EI_12 * (k - 1) + shared->dim_n_EI_1 * (j - 1) + i - 1] - internal.n_EI_P[shared->dim_n_EI_P_12 * (k - 1) + shared->dim_n_EI_P_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_HR_1; ++i) {
      for (int j = 1; j <= shared->dim_n_HR_2; ++j) {
        for (int k = 1; k <= shared->dim_n_HR_3; ++k) {
          internal.n_HR[i - 1 + shared->dim_n_HR_1 * (j - 1) + shared->dim_n_HR_12 * (k - 1)] = internal.n_Hx[shared->dim_n_Hx_12 * (k - 1) + shared->dim_n_Hx_1 * (j - 1) + i - 1] - internal.n_HD[shared->dim_n_HD_12 * (k - 1) + shared->dim_n_HD_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_CHG_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_CHG_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_CHG_3; ++k) {
          internal.n_I_CHG[i - 1 + shared->dim_n_I_CHG_1 * (j - 1) + shared->dim_n_I_CHG_12 * (k - 1)] = internal.n_I_Cx[shared->dim_n_I_Cx_12 * (k - 1) + shared->dim_n_I_Cx_1 * (j - 1) + i - 1] - internal.n_I_CR[shared->dim_n_I_CR_12 * (k - 1) + shared->dim_n_I_CR_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_D_1; ++i) {
      for (int j = 1; j <= shared->dim_D_2; ++j) {
        for (int k = 1; k <= shared->dim_D_3; ++k) {
          state_next[shared->offset_variable_D + i - 1 + shared->dim_D_1 * (j - 1) + shared->dim_D_12 * (k - 1)] = D[shared->dim_D_12 * (k - 1) + shared->dim_D_1 * (j - 1) + i - 1] + internal.n_HD[shared->dim_n_HD_12 * (k - 1) + shared->dim_n_HD_1 * (j - 1) + i - 1] + internal.n_GD[shared->dim_n_GD_12 * (k - 1) + shared->dim_n_GD_1 * (j - 1) + i - 1];
        }
      }
    }
    state_next[2] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum1<real_type>(internal.n_HD.data(), 0, shared->dim_n_HD) : D_inc + odin_sum1<real_type>(internal.n_HD.data(), 0, shared->dim_n_HD));
    state_next[8] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_HD.data(), 0, 4, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12) : D_inc_0_39 + odin_sum3<real_type>(internal.n_HD.data(), 0, 4, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12));
    state_next[9] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_HD.data(), 4, 5, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12) : D_inc_40_49 + odin_sum3<real_type>(internal.n_HD.data(), 4, 5, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12));
    state_next[10] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_HD.data(), 5, 6, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12) : D_inc_50_59 + odin_sum3<real_type>(internal.n_HD.data(), 5, 6, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12));
    state_next[11] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_HD.data(), 6, 7, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12) : D_inc_60_69 + odin_sum3<real_type>(internal.n_HD.data(), 6, 7, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12));
    state_next[12] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_HD.data(), 7, 8, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12) : D_inc_70_plus + odin_sum3<real_type>(internal.n_HD.data(), 7, 8, 0, shared->dim_n_HD_2, 0, shared->dim_n_HD_3, shared->dim_n_HD_1, shared->dim_n_HD_12));
    state_next[13] = odin_sum1<real_type>(T_P_1, 0, shared->dim_T_P_1) + odin_sum1<real_type>(internal.n_T_pre_1T_P_1.data(), 0, shared->dim_n_T_pre_1T_P_1) - odin_sum1<real_type>(internal.n_T_P_1T_N_1.data(), 0, shared->dim_n_T_P_1T_N_1);
    state_next[14] = odin_sum3<real_type>(T_P_1, 2, 3, 0, shared->dim_T_P_1_2, 0, shared->dim_T_P_1_3, shared->dim_T_P_1_1, shared->dim_T_P_1_12) + odin_sum3<real_type>(internal.n_T_pre_1T_P_1.data(), 2, 3, 0, shared->dim_n_T_pre_1T_P_1_2, 0, shared->dim_n_T_pre_1T_P_1_3, shared->dim_n_T_pre_1T_P_1_1, shared->dim_n_T_pre_1T_P_1_12) - odin_sum3<real_type>(internal.n_T_P_1T_N_1.data(), 2, 3, 0, shared->dim_n_T_P_1T_N_1_2, 0, shared->dim_n_T_P_1T_N_1_3, shared->dim_n_T_P_1T_N_1_1, shared->dim_n_T_P_1T_N_1_12);
    state_next[15] = odin_sum3<real_type>(T_P_1, 3, 4, 0, shared->dim_T_P_1_2, 0, shared->dim_T_P_1_3, shared->dim_T_P_1_1, shared->dim_T_P_1_12) + odin_sum3<real_type>(internal.n_T_pre_1T_P_1.data(), 3, 4, 0, shared->dim_n_T_pre_1T_P_1_2, 0, shared->dim_n_T_pre_1T_P_1_3, shared->dim_n_T_pre_1T_P_1_1, shared->dim_n_T_pre_1T_P_1_12) - odin_sum3<real_type>(internal.n_T_P_1T_N_1.data(), 3, 4, 0, shared->dim_n_T_P_1T_N_1_2, 0, shared->dim_n_T_P_1T_N_1_3, shared->dim_n_T_P_1T_N_1_1, shared->dim_n_T_P_1T_N_1_12);
    state_next[16] = odin_sum3<real_type>(T_P_1, 4, 5, 0, shared->dim_T_P_1_2, 0, shared->dim_T_P_1_3, shared->dim_T_P_1_1, shared->dim_T_P_1_12) + odin_sum3<real_type>(internal.n_T_pre_1T_P_1.data(), 4, 5, 0, shared->dim_n_T_pre_1T_P_1_2, 0, shared->dim_n_T_pre_1T_P_1_3, shared->dim_n_T_pre_1T_P_1_1, shared->dim_n_T_pre_1T_P_1_12) - odin_sum3<real_type>(internal.n_T_P_1T_N_1.data(), 4, 5, 0, shared->dim_n_T_P_1T_N_1_2, 0, shared->dim_n_T_P_1T_N_1_3, shared->dim_n_T_P_1T_N_1_1, shared->dim_n_T_P_1T_N_1_12);
    state_next[17] = odin_sum3<real_type>(T_P_1, 5, 6, 0, shared->dim_T_P_1_2, 0, shared->dim_T_P_1_3, shared->dim_T_P_1_1, shared->dim_T_P_1_12) + odin_sum3<real_type>(internal.n_T_pre_1T_P_1.data(), 5, 6, 0, shared->dim_n_T_pre_1T_P_1_2, 0, shared->dim_n_T_pre_1T_P_1_3, shared->dim_n_T_pre_1T_P_1_1, shared->dim_n_T_pre_1T_P_1_12) - odin_sum3<real_type>(internal.n_T_P_1T_N_1.data(), 5, 6, 0, shared->dim_n_T_P_1T_N_1_2, 0, shared->dim_n_T_P_1T_N_1_3, shared->dim_n_T_P_1T_N_1_1, shared->dim_n_T_P_1T_N_1_12);
    state_next[18] = odin_sum3<real_type>(T_P_1, 6, 7, 0, shared->dim_T_P_1_2, 0, shared->dim_T_P_1_3, shared->dim_T_P_1_1, shared->dim_T_P_1_12) + odin_sum3<real_type>(internal.n_T_pre_1T_P_1.data(), 6, 7, 0, shared->dim_n_T_pre_1T_P_1_2, 0, shared->dim_n_T_pre_1T_P_1_3, shared->dim_n_T_pre_1T_P_1_1, shared->dim_n_T_pre_1T_P_1_12) - odin_sum3<real_type>(internal.n_T_P_1T_N_1.data(), 6, 7, 0, shared->dim_n_T_P_1T_N_1_2, 0, shared->dim_n_T_P_1T_N_1_3, shared->dim_n_T_P_1T_N_1_1, shared->dim_n_T_P_1T_N_1_12);
    state_next[19] = odin_sum3<real_type>(T_P_1, 7, 8, 0, shared->dim_T_P_1_2, 0, shared->dim_T_P_1_3, shared->dim_T_P_1_1, shared->dim_T_P_1_12) + odin_sum3<real_type>(internal.n_T_pre_1T_P_1.data(), 7, 8, 0, shared->dim_n_T_pre_1T_P_1_2, 0, shared->dim_n_T_pre_1T_P_1_3, shared->dim_n_T_pre_1T_P_1_1, shared->dim_n_T_pre_1T_P_1_12) - odin_sum3<real_type>(internal.n_T_P_1T_N_1.data(), 7, 8, 0, shared->dim_n_T_P_1T_N_1_2, 0, shared->dim_n_T_P_1T_N_1_3, shared->dim_n_T_P_1T_N_1_1, shared->dim_n_T_P_1T_N_1_12);
    for (int i = 1; i <= shared->dim_T_N_1_1; ++i) {
      for (int j = 1; j <= shared->dim_T_N_1_2; ++j) {
        for (int k = 1; k <= shared->dim_T_N_1_3; ++k) {
          state_next[shared->offset_variable_T_N_1 + i - 1 + shared->dim_T_N_1_1 * (j - 1) + shared->dim_T_N_1_12 * (k - 1)] = T_N_1[shared->dim_T_N_1_12 * (k - 1) + shared->dim_T_N_1_1 * (j - 1) + i - 1] + internal.n_T_pre_1x[shared->dim_n_T_pre_1x_12 * (k - 1) + shared->dim_n_T_pre_1x_1 * (j - 1) + i - 1] - internal.n_T_pre_1T_P_1[shared->dim_n_T_pre_1T_P_1_12 * (k - 1) + shared->dim_n_T_pre_1T_P_1_1 * (j - 1) + i - 1] + internal.n_T_P_1T_N_1[shared->dim_n_T_P_1T_N_1_12 * (k - 1) + shared->dim_n_T_P_1T_N_1_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_T_P_1_1; ++i) {
      for (int j = 1; j <= shared->dim_T_P_1_2; ++j) {
        for (int k = 1; k <= shared->dim_T_P_1_3; ++k) {
          state_next[shared->offset_variable_T_P_1 + i - 1 + shared->dim_T_P_1_1 * (j - 1) + shared->dim_T_P_1_12 * (k - 1)] = T_P_1[shared->dim_T_P_1_12 * (k - 1) + shared->dim_T_P_1_1 * (j - 1) + i - 1] + internal.n_T_pre_1T_P_1[shared->dim_n_T_pre_1T_P_1_12 * (k - 1) + shared->dim_n_T_pre_1T_P_1_1 * (j - 1) + i - 1] - internal.n_T_P_1T_N_1[shared->dim_n_T_P_1T_N_1_12 * (k - 1) + shared->dim_n_T_P_1T_N_1_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_vaccine_probability_doses_1; ++i) {
      for (int j = 1; j <= shared->dim_vaccine_probability_doses_2; ++j) {
        internal.vaccine_probability_doses[i - 1 + shared->dim_vaccine_probability_doses_1 * (j - 1)] = dust::math::min((internal.vaccine_n_candidates[shared->dim_vaccine_n_candidates_1 * (j - 1) + i - 1] > 0 ? internal.vaccine_attempted_doses[shared->dim_vaccine_attempted_doses_1 * (j - 1) + i - 1] / (real_type) internal.vaccine_n_candidates[shared->dim_vaccine_n_candidates_1 * (j - 1) + i - 1] : 0), static_cast<real_type>(1));
      }
    }
    for (int i = 1; i <= shared->dim_lambda_sus_1; ++i) {
      for (int j = 1; j <= shared->dim_lambda_sus_2; ++j) {
        for (int k = 1; k <= shared->dim_lambda_sus_3; ++k) {
          internal.lambda_sus[i - 1 + shared->dim_lambda_sus_1 * (j - 1) + shared->dim_lambda_sus_12 * (k - 1)] = shared->rel_susceptibility[shared->dim_rel_susceptibility_12 * (k - 1) + shared->dim_rel_susceptibility_1 * (j - 1) + i - 1] * internal.lambda[shared->dim_lambda_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_CH_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_CH_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_CH_3; ++k) {
          internal.n_I_CH[i - 1 + shared->dim_n_I_CH_1 * (j - 1) + shared->dim_n_I_CH_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_I_CHG[shared->dim_n_I_CHG_12 * (k - 1) + shared->dim_n_I_CHG_1 * (j - 1) + i - 1], 1 - shared->rel_p_death[shared->dim_rel_p_death_12 * (k - 1) + shared->dim_rel_p_death_1 * (j - 1) + i - 1] * shared->strain_rel_p_death[j - 1] * shared->p_G[i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_V_1; ++i) {
      for (int j = 1; j <= shared->dim_p_V_2; ++j) {
        internal.p_V[i - 1 + shared->dim_p_V_1 * (j - 1)] = (shared->index_dose_inverse[j - 1] > 0 ? internal.vaccine_probability_doses[shared->dim_vaccine_probability_doses_1 * (shared->index_dose_inverse[j - 1] - 1) + i - 1] : 1 - dust::math::exp(- shared->vaccine_progression_rate_base[shared->dim_vaccine_progression_rate_base_1 * (j - 1) + i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_I_CG_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_CG_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_CG_3; ++k) {
          internal.n_I_CG[i - 1 + shared->dim_n_I_CG_1 * (j - 1) + shared->dim_n_I_CG_12 * (k - 1)] = internal.n_I_CHG[shared->dim_n_I_CHG_12 * (k - 1) + shared->dim_n_I_CHG_1 * (j - 1) + i - 1] - internal.n_I_CH[shared->dim_n_I_CH_12 * (k - 1) + shared->dim_n_I_CH_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_EV_1; ++i) {
      for (int j = 1; j <= shared->dim_p_EV_2; ++j) {
        for (int k = 1; k <= shared->dim_p_EV_3; ++k) {
          internal.p_EV[i - 1 + shared->dim_p_EV_1 * (j - 1) + shared->dim_p_EV_12 * (k - 1)] = internal.p_V[shared->dim_p_V_1 * (k - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_I_AV_1; ++i) {
      for (int j = 1; j <= shared->dim_p_I_AV_2; ++j) {
        for (int k = 1; k <= shared->dim_p_I_AV_3; ++k) {
          internal.p_I_AV[i - 1 + shared->dim_p_I_AV_1 * (j - 1) + shared->dim_p_I_AV_12 * (k - 1)] = internal.p_V[shared->dim_p_V_1 * (k - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_I_PV_1; ++i) {
      for (int j = 1; j <= shared->dim_p_I_PV_2; ++j) {
        for (int k = 1; k <= shared->dim_p_I_PV_3; ++k) {
          internal.p_I_PV[i - 1 + shared->dim_p_I_PV_1 * (j - 1) + shared->dim_p_I_PV_12 * (k - 1)] = internal.p_V[shared->dim_p_V_1 * (k - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_RS_1; ++i) {
      for (int j = 1; j <= shared->dim_p_RS_2; ++j) {
        for (int k = 1; k <= shared->dim_p_RS_3; ++k) {
          internal.p_RS[i - 1 + shared->dim_p_RS_1 * (j - 1) + shared->dim_p_RS_12 * (k - 1)] = (shared->n_strains == 1 || j > 2 ? 1 : ((shared->waning_rate == 0 ? 0 : (shared->waning_rate / (real_type) (shared->waning_rate + internal.lambda_sus[shared->dim_lambda_sus_12 * (k - 1) + shared->dim_lambda_sus_1 * (3 - j - 1) + i - 1] * (1 - shared->cross_immunity[j - 1]))))));
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_RV_1; ++i) {
      for (int j = 1; j <= shared->dim_p_RV_2; ++j) {
        for (int k = 1; k <= shared->dim_p_RV_3; ++k) {
          internal.p_RV[i - 1 + shared->dim_p_RV_1 * (j - 1) + shared->dim_p_RV_12 * (k - 1)] = internal.p_V[shared->dim_p_V_1 * (k - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_SE_1; ++i) {
      for (int j = 1; j <= shared->dim_p_SE_2; ++j) {
        internal.p_SE[i - 1 + shared->dim_p_SE_1 * (j - 1)] = 1 - dust::math::exp(- odin_sum3<real_type>(internal.lambda_sus.data(), i - 1, i, 0, shared->dim_lambda_sus_2, j - 1, j, shared->dim_lambda_sus_1, shared->dim_lambda_sus_12) * shared->dt);
      }
    }
    for (int i = 1; i <= shared->dim_p_SV_1; ++i) {
      for (int j = 1; j <= shared->dim_p_SV_2; ++j) {
        internal.p_SV[i - 1 + shared->dim_p_SV_1 * (j - 1)] = internal.p_V[shared->dim_p_V_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_rate_Rx_1; ++i) {
      for (int j = 1; j <= shared->dim_rate_Rx_2; ++j) {
        for (int k = 1; k <= shared->dim_rate_Rx_3; ++k) {
          internal.rate_Rx[i - 1 + shared->dim_rate_Rx_1 * (j - 1) + shared->dim_rate_Rx_12 * (k - 1)] = shared->waning_rate + (shared->n_strains == 1 || j > 2 ? 0 : internal.lambda_sus[shared->dim_lambda_sus_12 * (k - 1) + shared->dim_lambda_sus_1 * (3 - j - 1) + i - 1] * (1 - shared->cross_immunity[j - 1]));
        }
      }
    }
    for (int i = 1; i <= shared->dim_rel_foi_strain_1; ++i) {
      for (int j = 1; j <= shared->dim_rel_foi_strain_2; ++j) {
        for (int k = 1; k <= shared->dim_rel_foi_strain_3; ++k) {
          internal.rel_foi_strain[i - 1 + shared->dim_rel_foi_strain_1 * (j - 1) + shared->dim_rel_foi_strain_12 * (k - 1)] = ((odin_sum3<real_type>(internal.lambda_sus.data(), i - 1, i, 0, shared->dim_lambda_sus_2, k - 1, k, shared->dim_lambda_sus_1, shared->dim_lambda_sus_12) == 0 ? ((j == 1 ? 1 : 0)) : dust::math::min(internal.lambda_sus[shared->dim_lambda_sus_12 * (k - 1) + shared->dim_lambda_sus_1 * (j - 1) + i - 1] / (real_type) odin_sum3<real_type>(internal.lambda_sus.data(), i - 1, i, 0, shared->dim_lambda_sus_2, k - 1, k, shared->dim_lambda_sus_1, shared->dim_lambda_sus_12), static_cast<real_type>(1))));
        }
      }
    }
    for (int i = 1; i <= shared->dim_H_1; ++i) {
      for (int j = 1; j <= shared->dim_H_2; ++j) {
        for (int k = 1; k <= shared->dim_H_3; ++k) {
          state_next[shared->offset_variable_H + i - 1 + shared->dim_H_1 * (j - 1) + shared->dim_H_12 * (k - 1)] = H[shared->dim_H_12 * (k - 1) + shared->dim_H_1 * (j - 1) + i - 1] + internal.n_I_CH[shared->dim_n_I_CH_12 * (k - 1) + shared->dim_n_I_CH_1 * (j - 1) + i - 1] - internal.n_HR[shared->dim_n_HR_12 * (k - 1) + shared->dim_n_HR_1 * (j - 1) + i - 1] - internal.n_HD[shared->dim_n_HD_12 * (k - 1) + shared->dim_n_HD_1 * (j - 1) + i - 1];
        }
      }
    }
    state_next[1] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum1<real_type>(internal.n_I_CH.data(), 0, shared->dim_n_I_CH) : H_inc + odin_sum1<real_type>(internal.n_I_CH.data(), 0, shared->dim_n_I_CH));
    state_next[3] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_I_CH.data(), 0, 4, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12) : H_inc_0_39 + odin_sum3<real_type>(internal.n_I_CH.data(), 0, 4, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12));
    state_next[4] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_I_CH.data(), 4, 5, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12) : H_inc_40_49 + odin_sum3<real_type>(internal.n_I_CH.data(), 4, 5, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12));
    state_next[5] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_I_CH.data(), 5, 6, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12) : H_inc_50_59 + odin_sum3<real_type>(internal.n_I_CH.data(), 5, 6, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12));
    state_next[6] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_I_CH.data(), 6, 7, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12) : H_inc_60_69 + odin_sum3<real_type>(internal.n_I_CH.data(), 6, 7, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12));
    state_next[7] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? odin_sum3<real_type>(internal.n_I_CH.data(), 7, 8, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12) : H_inc_70_plus + odin_sum3<real_type>(internal.n_I_CH.data(), 7, 8, 0, shared->dim_n_I_CH_2, 0, shared->dim_n_I_CH_3, shared->dim_n_I_CH_1, shared->dim_n_I_CH_12));
    for (int i = 1; i <= shared->dim_n_EV_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EV_2; ++j) {
        for (int k = 1; k <= shared->dim_n_EV_3; ++k) {
          internal.n_EV[i - 1 + shared->dim_n_EV_1 * (j - 1) + shared->dim_n_EV_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, E[shared->dim_E_12 * (k - 1) + shared->dim_E_1 * (j - 1) + i - 1] - internal.n_EI[shared->dim_n_EI_12 * (k - 1) + shared->dim_n_EI_1 * (j - 1) + i - 1], internal.p_EV[shared->dim_p_EV_12 * (k - 1) + shared->dim_p_EV_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_AV_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_AV_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_AV_3; ++k) {
          internal.n_I_AV[i - 1 + shared->dim_n_I_AV_1 * (j - 1) + shared->dim_n_I_AV_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_A[shared->dim_I_A_12 * (k - 1) + shared->dim_I_A_1 * (j - 1) + i - 1] - internal.n_I_AR[shared->dim_n_I_AR_12 * (k - 1) + shared->dim_n_I_AR_1 * (j - 1) + i - 1], internal.p_I_AV[shared->dim_p_I_AV_12 * (k - 1) + shared->dim_p_I_AV_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_I_PV_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_PV_2; ++j) {
        for (int k = 1; k <= shared->dim_n_I_PV_3; ++k) {
          internal.n_I_PV[i - 1 + shared->dim_n_I_PV_1 * (j - 1) + shared->dim_n_I_PV_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_P[shared->dim_I_P_12 * (k - 1) + shared->dim_I_P_1 * (j - 1) + i - 1] - internal.n_I_PI_C[shared->dim_n_I_PI_C_12 * (k - 1) + shared->dim_n_I_PI_C_1 * (j - 1) + i - 1], internal.p_I_PV[shared->dim_p_I_PV_12 * (k - 1) + shared->dim_p_I_PV_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_SE_tot_1; ++i) {
      for (int j = 1; j <= shared->dim_n_SE_tot_2; ++j) {
        internal.n_SE_tot[i - 1 + shared->dim_n_SE_tot_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, S[shared->dim_S_1 * (j - 1) + i - 1], internal.p_SE[shared->dim_p_SE_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_p_Rx_1; ++i) {
      for (int j = 1; j <= shared->dim_p_Rx_2; ++j) {
        for (int k = 1; k <= shared->dim_p_Rx_3; ++k) {
          internal.p_Rx[i - 1 + shared->dim_p_Rx_1 * (j - 1) + shared->dim_p_Rx_12 * (k - 1)] = 1 - dust::math::exp(- internal.rate_Rx[shared->dim_rate_Rx_12 * (k - 1) + shared->dim_rate_Rx_1 * (j - 1) + i - 1] * shared->dt);
        }
      }
    }
    for (int i = 1; i <= shared->dim_G_1; ++i) {
      for (int j = 1; j <= shared->dim_G_2; ++j) {
        for (int k = 1; k <= shared->dim_G_3; ++k) {
          state_next[shared->offset_variable_G + i - 1 + shared->dim_G_1 * (j - 1) + shared->dim_G_12 * (k - 1)] = G[shared->dim_G_12 * (k - 1) + shared->dim_G_1 * (j - 1) + i - 1] + internal.n_I_CG[shared->dim_n_I_CG_12 * (k - 1) + shared->dim_n_I_CG_1 * (j - 1) + i - 1] - internal.n_GD[shared->dim_n_GD_12 * (k - 1) + shared->dim_n_GD_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_Rx_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Rx_2; ++j) {
        for (int k = 1; k <= shared->dim_n_Rx_3; ++k) {
          internal.n_Rx[i - 1 + shared->dim_n_Rx_1 * (j - 1) + shared->dim_n_Rx_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, R[shared->dim_R_12 * (k - 1) + shared->dim_R_1 * (j - 1) + i - 1], internal.p_Rx[shared->dim_p_Rx_12 * (k - 1) + shared->dim_p_Rx_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_SE_1; ++i) {
      for (int j = 1; j <= shared->dim_n_SE_2; ++j) {
        for (int k = 1; k <= shared->dim_n_SE_3; ++k) {
          internal.n_SE[i - 1 + shared->dim_n_SE_1 * (j - 1) + shared->dim_n_SE_12 * (k - 1)] = (j == 1 || shared->n_real_strains == 1 ? dust::random::binomial<real_type>(rng_state, internal.n_SE_tot[shared->dim_n_SE_tot_1 * (k - 1) + i - 1], internal.rel_foi_strain[shared->dim_rel_foi_strain_12 * (k - 1) + shared->dim_rel_foi_strain_1 * (j - 1) + i - 1]) : ((j == 2 ? internal.n_SE_tot[shared->dim_n_SE_tot_1 * (k - 1) + i - 1] - internal.n_SE[shared->dim_n_SE_12 * (k - 1) + shared->dim_n_SE_1 * 0 + i - 1] : 0)));
        }
      }
    }
    {
       int i = shared->seed_age;
       int j = 1;
       int k = 1;
       internal.n_SE[i - 1 + shared->dim_n_SE_1 * (j - 1) + shared->dim_n_SE_12 * (k - 1)] = internal.n_SE[shared->dim_n_SE_12 * 0 + shared->dim_n_SE_1 * 0 + shared->seed_age - 1] + dust::math::min(S[shared->dim_S_1 * 0 + shared->seed_age - 1] - internal.n_SE_tot[shared->dim_n_SE_tot_1 * 0 + shared->seed_age - 1], seed);
    }
    {
       int i = shared->seed_age;
       for (int j = 2; j <= shared->n_strains; ++j) {
         int k = 1;
         internal.n_SE[i - 1 + shared->dim_n_SE_1 * (j - 1) + shared->dim_n_SE_12 * (k - 1)] = (j < 3 ? dust::math::min(internal.n_SE[shared->dim_n_SE_12 * (k - 1) + shared->dim_n_SE_1 * (j - 1) + i - 1] + S[shared->dim_S_1 * (k - 1) + i - 1] - odin_sum3<real_type>(internal.n_SE.data(), i - 1, i, 0, shared->dim_n_SE_2, k - 1, k, shared->dim_n_SE_1, shared->dim_n_SE_12), internal.n_SE[shared->dim_n_SE_12 * (k - 1) + shared->dim_n_SE_1 * (j - 1) + i - 1] + strain_seed) : 0);
       }
    }
    for (int i = 1; i <= shared->dim_I_A_1; ++i) {
      for (int j = 1; j <= shared->dim_I_A_2; ++j) {
        for (int k = 1; k <= shared->dim_I_A_3; ++k) {
          state_next[shared->offset_variable_I_A + i - 1 + shared->dim_I_A_1 * (j - 1) + shared->dim_I_A_12 * (k - 1)] = I_A[shared->dim_I_A_12 * (k - 1) + shared->dim_I_A_1 * (j - 1) + i - 1] + internal.n_EI_A[shared->dim_n_EI_A_12 * (k - 1) + shared->dim_n_EI_A_1 * (j - 1) + i - 1] - internal.n_I_AR[shared->dim_n_I_AR_12 * (k - 1) + shared->dim_n_I_AR_1 * (j - 1) + i - 1] - internal.n_I_AV[shared->dim_n_I_AV_12 * (k - 1) + shared->dim_n_I_AV_1 * (j - 1) + i - 1] + ((k == 1 ? internal.n_I_AV[shared->dim_n_I_AV_12 * (shared->n_vax - 1) + shared->dim_n_I_AV_1 * (j - 1) + i - 1] : internal.n_I_AV[shared->dim_n_I_AV_12 * (k - 1 - 1) + shared->dim_n_I_AV_1 * (j - 1) + i - 1]));
        }
      }
    }
    for (int i = 1; i <= shared->dim_I_P_1; ++i) {
      for (int j = 1; j <= shared->dim_I_P_2; ++j) {
        for (int k = 1; k <= shared->dim_I_P_3; ++k) {
          state_next[shared->offset_variable_I_P + i - 1 + shared->dim_I_P_1 * (j - 1) + shared->dim_I_P_12 * (k - 1)] = I_P[shared->dim_I_P_12 * (k - 1) + shared->dim_I_P_1 * (j - 1) + i - 1] + internal.n_EI_P[shared->dim_n_EI_P_12 * (k - 1) + shared->dim_n_EI_P_1 * (j - 1) + i - 1] - internal.n_I_PI_C[shared->dim_n_I_PI_C_12 * (k - 1) + shared->dim_n_I_PI_C_1 * (j - 1) + i - 1] - internal.n_I_PV[shared->dim_n_I_PV_12 * (k - 1) + shared->dim_n_I_PV_1 * (j - 1) + i - 1] + ((k == 1 ? internal.n_I_PV[shared->dim_n_I_PV_12 * (shared->n_vax - 1) + shared->dim_n_I_PV_1 * (j - 1) + i - 1] : internal.n_I_PV[shared->dim_n_I_PV_12 * (k - 1 - 1) + shared->dim_n_I_PV_1 * (j - 1) + i - 1]));
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_RS_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RS_2; ++j) {
        for (int k = 1; k <= shared->dim_n_RS_3; ++k) {
          internal.n_RS[i - 1 + shared->dim_n_RS_1 * (j - 1) + shared->dim_n_RS_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_Rx[shared->dim_n_Rx_12 * (k - 1) + shared->dim_n_Rx_1 * (j - 1) + i - 1], internal.p_RS[shared->dim_p_RS_12 * (k - 1) + shared->dim_p_RS_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_RV_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RV_2; ++j) {
        for (int k = 1; k <= shared->dim_n_RV_3; ++k) {
          internal.n_RV[i - 1 + shared->dim_n_RV_1 * (j - 1) + shared->dim_n_RV_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, R[shared->dim_R_12 * (k - 1) + shared->dim_R_1 * (j - 1) + i - 1] - internal.n_Rx[shared->dim_n_Rx_12 * (k - 1) + shared->dim_n_Rx_1 * (j - 1) + i - 1], internal.p_RV[shared->dim_p_RV_12 * (k - 1) + shared->dim_p_RV_1 * (j - 1) + i - 1]);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_SV_1; ++i) {
      for (int j = 1; j <= shared->dim_n_SV_2; ++j) {
        internal.n_SV[i - 1 + shared->dim_n_SV_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, S[shared->dim_S_1 * (j - 1) + i - 1] - odin_sum3<real_type>(internal.n_SE.data(), i - 1, i, 0, shared->dim_n_SE_2, j - 1, j, shared->dim_n_SE_1, shared->dim_n_SE_12), internal.p_SV[shared->dim_p_SV_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_RE_1; ++i) {
      for (int j = 1; j <= shared->dim_n_RE_2; ++j) {
        for (int k = 1; k <= shared->dim_n_RE_3; ++k) {
          internal.n_RE[i - 1 + shared->dim_n_RE_1 * (j - 1) + shared->dim_n_RE_12 * (k - 1)] = internal.n_Rx[shared->dim_n_Rx_12 * (k - 1) + shared->dim_n_Rx_1 * (j - 1) + i - 1] - internal.n_RS[shared->dim_n_RS_12 * (k - 1) + shared->dim_n_RS_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_V_1; ++i) {
      for (int j = 1; j <= shared->dim_n_V_2; ++j) {
        internal.n_V[i - 1 + shared->dim_n_V_1 * (j - 1)] = internal.n_SV[shared->dim_n_SV_1 * (j - 1) + i - 1] + odin_sum3<real_type>(internal.n_EV.data(), i - 1, i, 0, shared->dim_n_EV_2, j - 1, j, shared->dim_n_EV_1, shared->dim_n_EV_12) + odin_sum3<real_type>(internal.n_I_AV.data(), i - 1, i, 0, shared->dim_n_I_AV_2, j - 1, j, shared->dim_n_I_AV_1, shared->dim_n_I_AV_12) + odin_sum3<real_type>(internal.n_I_PV.data(), i - 1, i, 0, shared->dim_n_I_PV_2, j - 1, j, shared->dim_n_I_PV_1, shared->dim_n_I_PV_12) + odin_sum3<real_type>(internal.n_RV.data(), i - 1, i, 0, shared->dim_n_RV_2, j - 1, j, shared->dim_n_RV_1, shared->dim_n_RV_12);
      }
    }
    for (int i = 1; i <= shared->dim_R_1; ++i) {
      for (int j = 1; j <= shared->dim_R_2; ++j) {
        for (int k = 1; k <= shared->dim_R_3; ++k) {
          state_next[shared->offset_variable_R + i - 1 + shared->dim_R_1 * (j - 1) + shared->dim_R_12 * (k - 1)] = R[shared->dim_R_12 * (k - 1) + shared->dim_R_1 * (j - 1) + i - 1] + internal.n_I_AR[shared->dim_n_I_AR_12 * (k - 1) + shared->dim_n_I_AR_1 * (j - 1) + i - 1] + internal.n_I_CR[shared->dim_n_I_CR_12 * (k - 1) + shared->dim_n_I_CR_1 * (j - 1) + i - 1] + internal.n_HR[shared->dim_n_HR_12 * (k - 1) + shared->dim_n_HR_1 * (j - 1) + i - 1] - internal.n_Rx[shared->dim_n_Rx_12 * (k - 1) + shared->dim_n_Rx_1 * (j - 1) + i - 1] - internal.n_RV[shared->dim_n_RV_12 * (k - 1) + shared->dim_n_RV_1 * (j - 1) + i - 1] + ((k == 1 ? internal.n_RV[shared->dim_n_RV_12 * (shared->n_vax - 1) + shared->dim_n_RV_1 * (j - 1) + i - 1] : internal.n_RV[shared->dim_n_RV_12 * (k - 1 - 1) + shared->dim_n_RV_1 * (j - 1) + i - 1]));
        }
      }
    }
    for (int i = 1; i <= shared->dim_S_1; ++i) {
      for (int j = 1; j <= shared->dim_S_2; ++j) {
        state_next[shared->offset_variable_S + i - 1 + shared->dim_S_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + i - 1] + odin_sum3<real_type>(internal.n_RS.data(), i - 1, i, 0, shared->dim_n_RS_2, j - 1, j, shared->dim_n_RS_1, shared->dim_n_RS_12) - odin_sum3<real_type>(internal.n_SE.data(), i - 1, i, 0, shared->dim_n_SE_2, j - 1, j, shared->dim_n_SE_1, shared->dim_n_SE_12) - internal.n_SV[shared->dim_n_SV_1 * (j - 1) + i - 1] + ((j == 1 ? internal.n_SV[shared->dim_n_SV_1 * (shared->n_vax - 1) + i - 1] : internal.n_SV[shared->dim_n_SV_1 * (j - 1 - 1) + i - 1]));
      }
    }
    for (int i = 1; i <= shared->dim_E_1; ++i) {
      for (int j = 1; j <= shared->dim_E_2; ++j) {
        for (int k = 1; k <= shared->dim_E_3; ++k) {
          state_next[shared->offset_variable_E + i - 1 + shared->dim_E_1 * (j - 1) + shared->dim_E_12 * (k - 1)] = E[shared->dim_E_12 * (k - 1) + shared->dim_E_1 * (j - 1) + i - 1] + internal.n_SE[shared->dim_n_SE_12 * (k - 1) + shared->dim_n_SE_1 * (j - 1) + i - 1] + ((j > 2 ? internal.n_RE[shared->dim_n_RE_12 * (k - 1) + shared->dim_n_RE_1 * (j - 2 - 1) + i - 1] : 0)) - internal.n_EI[shared->dim_n_EI_12 * (k - 1) + shared->dim_n_EI_1 * (j - 1) + i - 1] - internal.n_EV[shared->dim_n_EV_12 * (k - 1) + shared->dim_n_EV_1 * (j - 1) + i - 1] + ((k == 1 ? internal.n_EV[shared->dim_n_EV_12 * (shared->n_vax - 1) + shared->dim_n_EV_1 * (j - 1) + i - 1] : internal.n_EV[shared->dim_n_EV_12 * (k - 1 - 1) + shared->dim_n_EV_1 * (j - 1) + i - 1]));
        }
      }
    }
    for (int i = 1; i <= shared->dim_vaccine_missed_doses_1; ++i) {
      for (int j = 1; j <= shared->dim_vaccine_missed_doses_2; ++j) {
        state_next[shared->offset_variable_vaccine_missed_doses + i - 1 + shared->dim_vaccine_missed_doses_1 * (j - 1)] = shared->vaccine_catchup_fraction * dust::math::max(internal.total_attempted_doses[shared->dim_total_attempted_doses_1 * (j - 1) + i - 1] - internal.n_V[shared->dim_n_V_1 * (shared->index_dose[j - 1] - 1) + i - 1], static_cast<real_type>(0));
      }
    }
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_type tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12) {
  real_type tot = 0.0;
  for (int k = from_k; k < to_k; ++k) {
    int kk = k * dim_x_12;
    for (int j = from_j; j < to_j; ++j) {
      int jj = j * dim_x_1 + kk;
      for (int i = from_i; i < to_i; ++i) {
        tot += x[i + jj];
      }
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<seirhdagevaxmultistrainsero> dust_pars<seirhdagevaxmultistrainsero>(cpp11::list user) {
  using real_type = typename seirhdagevaxmultistrainsero::real_type;
  auto shared = std::make_shared<seirhdagevaxmultistrainsero::shared_type>();
  seirhdagevaxmultistrainsero::internal_type internal;
  shared->initial_D_inc = 0;
  shared->initial_D_inc_0_39 = 0;
  shared->initial_D_inc_40_49 = 0;
  shared->initial_D_inc_50_59 = 0;
  shared->initial_D_inc_60_69 = 0;
  shared->initial_D_inc_70_plus = 0;
  shared->initial_H_inc = 0;
  shared->initial_H_inc_0_39 = 0;
  shared->initial_H_inc_40_49 = 0;
  shared->initial_H_inc_50_59 = 0;
  shared->initial_H_inc_60_69 = 0;
  shared->initial_H_inc_70_plus = 0;
  shared->initial_sero_pos_1 = 0;
  shared->initial_sero_pos_1_20_29 = 0;
  shared->initial_sero_pos_1_30_39 = 0;
  shared->initial_sero_pos_1_40_49 = 0;
  shared->initial_sero_pos_1_50_59 = 0;
  shared->initial_sero_pos_1_60_69 = 0;
  shared->initial_sero_pos_1_70_plus = 0;
  shared->initial_time = 0;
  shared->dt = NA_REAL;
  shared->n_age = NA_INTEGER;
  shared->n_doses = NA_INTEGER;
  shared->n_strains = NA_INTEGER;
  shared->n_vax = NA_INTEGER;
  shared->seed_step_start = NA_REAL;
  shared->strain_seed_step_start = NA_REAL;
  shared->waning_rate = NA_REAL;
  shared->beta = static_cast<real_type>(0.029999999999999999);
  shared->gamma_A = static_cast<real_type>(0.20000000000000001);
  shared->gamma_C = static_cast<real_type>(0.40000000000000002);
  shared->gamma_E = static_cast<real_type>(0.5);
  shared->gamma_G = 1 / (real_type) 3;
  shared->gamma_H = static_cast<real_type>(0.10000000000000001);
  shared->gamma_P = static_cast<real_type>(0.40000000000000002);
  shared->gamma_P_1 = 1 / (real_type) 200;
  shared->gamma_pre_1 = 1 / (real_type) 13;
  shared->p_P_1 = static_cast<real_type>(0.84999999999999998);
  shared->seed_age = 4;
  shared->theta_A = static_cast<real_type>(0.5);
  shared->vaccine_catchup_fraction = 1;
  shared->beta = user_get_scalar<real_type>(user, "beta", shared->beta, NA_REAL, NA_REAL);
  shared->dt = user_get_scalar<real_type>(user, "dt", shared->dt, NA_REAL, NA_REAL);
  shared->gamma_A = user_get_scalar<real_type>(user, "gamma_A", shared->gamma_A, NA_REAL, NA_REAL);
  shared->gamma_C = user_get_scalar<real_type>(user, "gamma_C", shared->gamma_C, NA_REAL, NA_REAL);
  shared->gamma_E = user_get_scalar<real_type>(user, "gamma_E", shared->gamma_E, NA_REAL, NA_REAL);
  shared->gamma_G = user_get_scalar<real_type>(user, "gamma_G", shared->gamma_G, NA_REAL, NA_REAL);
  shared->gamma_H = user_get_scalar<real_type>(user, "gamma_H", shared->gamma_H, NA_REAL, NA_REAL);
  shared->gamma_P = user_get_scalar<real_type>(user, "gamma_P", shared->gamma_P, NA_REAL, NA_REAL);
  shared->gamma_P_1 = user_get_scalar<real_type>(user, "gamma_P_1", shared->gamma_P_1, NA_REAL, NA_REAL);
  shared->gamma_pre_1 = user_get_scalar<real_type>(user, "gamma_pre_1", shared->gamma_pre_1, NA_REAL, NA_REAL);
  shared->n_age = user_get_scalar<int>(user, "n_age", shared->n_age, NA_INTEGER, NA_INTEGER);
  shared->n_doses = user_get_scalar<int>(user, "n_doses", shared->n_doses, NA_INTEGER, NA_INTEGER);
  shared->n_strains = user_get_scalar<int>(user, "n_strains", shared->n_strains, NA_INTEGER, NA_INTEGER);
  shared->n_vax = user_get_scalar<int>(user, "n_vax", shared->n_vax, NA_INTEGER, NA_INTEGER);
  shared->p_P_1 = user_get_scalar<real_type>(user, "p_P_1", shared->p_P_1, NA_REAL, NA_REAL);
  shared->seed_age = user_get_scalar<int>(user, "seed_age", shared->seed_age, NA_INTEGER, NA_INTEGER);
  shared->seed_step_start = user_get_scalar<real_type>(user, "seed_step_start", shared->seed_step_start, NA_REAL, NA_REAL);
  std::array <int, 1> dim_seed_value;
  shared->seed_value = user_get_array_variable<real_type, 1>(user, "seed_value", shared->seed_value, dim_seed_value, NA_REAL, NA_REAL);
  shared->dim_seed_value = shared->seed_value.size();
  shared->strain_seed_step_start = user_get_scalar<real_type>(user, "strain_seed_step_start", shared->strain_seed_step_start, NA_REAL, NA_REAL);
  std::array <int, 1> dim_strain_seed_value;
  shared->strain_seed_value = user_get_array_variable<real_type, 1>(user, "strain_seed_value", shared->strain_seed_value, dim_strain_seed_value, NA_REAL, NA_REAL);
  shared->dim_strain_seed_value = shared->strain_seed_value.size();
  shared->theta_A = user_get_scalar<real_type>(user, "theta_A", shared->theta_A, NA_REAL, NA_REAL);
  shared->vaccine_catchup_fraction = user_get_scalar<real_type>(user, "vaccine_catchup_fraction", shared->vaccine_catchup_fraction, NA_REAL, NA_REAL);
  std::array <int, 3> dim_vaccine_dose_step;
  shared->vaccine_dose_step = user_get_array_variable<real_type, 3>(user, "vaccine_dose_step", shared->vaccine_dose_step, dim_vaccine_dose_step, NA_REAL, NA_REAL);
  shared->dim_vaccine_dose_step = shared->vaccine_dose_step.size();
  shared->dim_vaccine_dose_step_1 = dim_vaccine_dose_step[0];
  shared->dim_vaccine_dose_step_2 = dim_vaccine_dose_step[1];
  shared->dim_vaccine_dose_step_3 = dim_vaccine_dose_step[2];
  shared->waning_rate = user_get_scalar<real_type>(user, "waning_rate", shared->waning_rate, NA_REAL, NA_REAL);
  shared->dim_D_1 = shared->n_age;
  shared->dim_D_2 = shared->n_strains;
  shared->dim_D_3 = shared->n_vax;
  shared->dim_E_1 = shared->n_age;
  shared->dim_E_2 = shared->n_strains;
  shared->dim_E_3 = shared->n_vax;
  shared->dim_G_1 = shared->n_age;
  shared->dim_G_2 = shared->n_strains;
  shared->dim_G_3 = shared->n_vax;
  shared->dim_H_1 = shared->n_age;
  shared->dim_H_2 = shared->n_strains;
  shared->dim_H_3 = shared->n_vax;
  shared->dim_I_A_1 = shared->n_age;
  shared->dim_I_A_2 = shared->n_strains;
  shared->dim_I_A_3 = shared->n_vax;
  shared->dim_I_C_1 = shared->n_age;
  shared->dim_I_C_2 = shared->n_strains;
  shared->dim_I_C_3 = shared->n_vax;
  shared->dim_I_P_1 = shared->n_age;
  shared->dim_I_P_2 = shared->n_strains;
  shared->dim_I_P_3 = shared->n_vax;
  shared->dim_I_rel_inf_1 = shared->n_age;
  shared->dim_I_rel_inf_2 = shared->n_strains;
  shared->dim_I_rel_inf_3 = shared->n_vax;
  shared->dim_index_dose = shared->n_doses;
  shared->dim_index_dose_inverse = shared->n_vax;
  shared->dim_m_1 = shared->n_age;
  shared->dim_m_2 = shared->n_age;
  shared->dim_n_EI_1 = shared->n_age;
  shared->dim_n_EI_2 = shared->n_strains;
  shared->dim_n_EI_3 = shared->n_vax;
  shared->dim_n_EI_A_1 = shared->n_age;
  shared->dim_n_EI_A_2 = shared->n_strains;
  shared->dim_n_EI_A_3 = shared->n_vax;
  shared->dim_n_EI_P_1 = shared->n_age;
  shared->dim_n_EI_P_2 = shared->n_strains;
  shared->dim_n_EI_P_3 = shared->n_vax;
  shared->dim_n_EV_1 = shared->n_age;
  shared->dim_n_EV_2 = shared->n_strains;
  shared->dim_n_EV_3 = shared->n_vax;
  shared->dim_n_GD_1 = shared->n_age;
  shared->dim_n_GD_2 = shared->n_strains;
  shared->dim_n_GD_3 = shared->n_vax;
  shared->dim_n_HD_1 = shared->n_age;
  shared->dim_n_HD_2 = shared->n_strains;
  shared->dim_n_HD_3 = shared->n_vax;
  shared->dim_n_HR_1 = shared->n_age;
  shared->dim_n_HR_2 = shared->n_strains;
  shared->dim_n_HR_3 = shared->n_vax;
  shared->dim_n_Hx_1 = shared->n_age;
  shared->dim_n_Hx_2 = shared->n_strains;
  shared->dim_n_Hx_3 = shared->n_vax;
  shared->dim_n_I_AR_1 = shared->n_age;
  shared->dim_n_I_AR_2 = shared->n_strains;
  shared->dim_n_I_AR_3 = shared->n_vax;
  shared->dim_n_I_AV_1 = shared->n_age;
  shared->dim_n_I_AV_2 = shared->n_strains;
  shared->dim_n_I_AV_3 = shared->n_vax;
  shared->dim_n_I_CG_1 = shared->n_age;
  shared->dim_n_I_CG_2 = shared->n_strains;
  shared->dim_n_I_CG_3 = shared->n_vax;
  shared->dim_n_I_CH_1 = shared->n_age;
  shared->dim_n_I_CH_2 = shared->n_strains;
  shared->dim_n_I_CH_3 = shared->n_vax;
  shared->dim_n_I_CHG_1 = shared->n_age;
  shared->dim_n_I_CHG_2 = shared->n_strains;
  shared->dim_n_I_CHG_3 = shared->n_vax;
  shared->dim_n_I_CR_1 = shared->n_age;
  shared->dim_n_I_CR_2 = shared->n_strains;
  shared->dim_n_I_CR_3 = shared->n_vax;
  shared->dim_n_I_Cx_1 = shared->n_age;
  shared->dim_n_I_Cx_2 = shared->n_strains;
  shared->dim_n_I_Cx_3 = shared->n_vax;
  shared->dim_n_I_PI_C_1 = shared->n_age;
  shared->dim_n_I_PI_C_2 = shared->n_strains;
  shared->dim_n_I_PI_C_3 = shared->n_vax;
  shared->dim_n_I_PV_1 = shared->n_age;
  shared->dim_n_I_PV_2 = shared->n_strains;
  shared->dim_n_I_PV_3 = shared->n_vax;
  shared->dim_n_RE_1 = shared->n_age;
  shared->dim_n_RE_2 = shared->n_strains;
  shared->dim_n_RE_3 = shared->n_vax;
  shared->dim_n_RS_1 = shared->n_age;
  shared->dim_n_RS_2 = shared->n_strains;
  shared->dim_n_RS_3 = shared->n_vax;
  shared->dim_n_RV_1 = shared->n_age;
  shared->dim_n_RV_2 = shared->n_strains;
  shared->dim_n_RV_3 = shared->n_vax;
  shared->dim_n_Rx_1 = shared->n_age;
  shared->dim_n_Rx_2 = shared->n_strains;
  shared->dim_n_Rx_3 = shared->n_vax;
  shared->dim_n_SE_1 = shared->n_age;
  shared->dim_n_SE_2 = shared->n_strains;
  shared->dim_n_SE_3 = shared->n_vax;
  shared->dim_n_SE_tot_1 = shared->n_age;
  shared->dim_n_SE_tot_2 = shared->n_vax;
  shared->dim_n_SV_1 = shared->n_age;
  shared->dim_n_SV_2 = shared->n_vax;
  shared->dim_n_T_P_1T_N_1_1 = shared->n_age;
  shared->dim_n_T_P_1T_N_1_2 = shared->n_strains;
  shared->dim_n_T_P_1T_N_1_3 = shared->n_vax;
  shared->dim_n_T_pre_1T_P_1_1 = shared->n_age;
  shared->dim_n_T_pre_1T_P_1_2 = shared->n_strains;
  shared->dim_n_T_pre_1T_P_1_3 = shared->n_vax;
  shared->dim_n_T_pre_1x_1 = shared->n_age;
  shared->dim_n_T_pre_1x_2 = shared->n_strains;
  shared->dim_n_T_pre_1x_3 = shared->n_vax;
  shared->dim_N_tot = shared->n_age;
  shared->dim_n_V_1 = shared->n_age;
  shared->dim_n_V_2 = shared->n_vax;
  shared->dim_p_C = shared->n_age;
  shared->dim_p_D = shared->n_age;
  shared->dim_p_EV_1 = shared->n_age;
  shared->dim_p_EV_2 = shared->n_strains;
  shared->dim_p_EV_3 = shared->n_vax;
  shared->dim_p_G = shared->n_age;
  shared->dim_p_H = shared->n_age;
  shared->dim_p_I_AV_1 = shared->n_age;
  shared->dim_p_I_AV_2 = shared->n_strains;
  shared->dim_p_I_AV_3 = shared->n_vax;
  shared->dim_p_I_PV_1 = shared->n_age;
  shared->dim_p_I_PV_2 = shared->n_strains;
  shared->dim_p_I_PV_3 = shared->n_vax;
  shared->dim_p_RS_1 = shared->n_age;
  shared->dim_p_RS_2 = shared->n_strains;
  shared->dim_p_RS_3 = shared->n_vax;
  shared->dim_p_RV_1 = shared->n_age;
  shared->dim_p_RV_2 = shared->n_strains;
  shared->dim_p_RV_3 = shared->n_vax;
  shared->dim_p_Rx_1 = shared->n_age;
  shared->dim_p_Rx_2 = shared->n_strains;
  shared->dim_p_Rx_3 = shared->n_vax;
  shared->dim_p_SE_1 = shared->n_age;
  shared->dim_p_SE_2 = shared->n_vax;
  shared->dim_p_SV_1 = shared->n_age;
  shared->dim_p_SV_2 = shared->n_vax;
  shared->dim_p_V_1 = shared->n_age;
  shared->dim_p_V_2 = shared->n_vax;
  shared->dim_R_1 = shared->n_age;
  shared->dim_R_2 = shared->n_strains;
  shared->dim_R_3 = shared->n_vax;
  shared->dim_rate_Rx_1 = shared->n_age;
  shared->dim_rate_Rx_2 = shared->n_strains;
  shared->dim_rate_Rx_3 = shared->n_vax;
  shared->dim_rel_infectivity_1 = shared->n_age;
  shared->dim_rel_infectivity_2 = shared->n_strains;
  shared->dim_rel_infectivity_3 = shared->n_vax;
  shared->dim_rel_p_death_1 = shared->n_age;
  shared->dim_rel_p_death_2 = shared->n_strains;
  shared->dim_rel_p_death_3 = shared->n_vax;
  shared->dim_rel_p_hosp_if_sympt_1 = shared->n_age;
  shared->dim_rel_p_hosp_if_sympt_2 = shared->n_strains;
  shared->dim_rel_p_hosp_if_sympt_3 = shared->n_vax;
  shared->dim_rel_p_sympt_1 = shared->n_age;
  shared->dim_rel_p_sympt_2 = shared->n_strains;
  shared->dim_rel_p_sympt_3 = shared->n_vax;
  shared->dim_rel_susceptibility_1 = shared->n_age;
  shared->dim_rel_susceptibility_2 = shared->n_strains;
  shared->dim_rel_susceptibility_3 = shared->n_vax;
  shared->dim_S_1 = shared->n_age;
  shared->dim_S_2 = shared->n_vax;
  shared->dim_s_ij_1 = shared->n_age;
  shared->dim_s_ij_2 = shared->n_age;
  shared->dim_s_ij_3 = shared->n_strains;
  shared->dim_strain_rel_p_death = shared->n_strains;
  shared->dim_strain_rel_p_hosp_if_sympt = shared->n_strains;
  shared->dim_strain_rel_p_sympt = shared->n_strains;
  shared->dim_strain_transmission = shared->n_strains;
  shared->dim_T_N_1_1 = shared->n_age;
  shared->dim_T_N_1_2 = shared->n_strains;
  shared->dim_T_N_1_3 = shared->n_vax;
  shared->dim_T_P_1_1 = shared->n_age;
  shared->dim_T_P_1_2 = shared->n_strains;
  shared->dim_T_P_1_3 = shared->n_vax;
  shared->dim_T_pre_1_1 = shared->n_age;
  shared->dim_T_pre_1_2 = shared->n_strains;
  shared->dim_T_pre_1_3 = shared->n_vax;
  shared->dim_total_attempted_doses_1 = shared->n_age;
  shared->dim_total_attempted_doses_2 = shared->n_doses;
  shared->dim_vaccine_attempted_doses_1 = shared->n_age;
  shared->dim_vaccine_attempted_doses_2 = shared->n_doses;
  shared->dim_vaccine_missed_doses_1 = shared->n_age;
  shared->dim_vaccine_missed_doses_2 = shared->n_doses;
  shared->dim_vaccine_n_candidates_1 = shared->n_age;
  shared->dim_vaccine_n_candidates_2 = shared->n_doses;
  shared->dim_vaccine_probability_doses_1 = shared->n_age;
  shared->dim_vaccine_probability_doses_2 = shared->n_doses;
  shared->dim_vaccine_progression_rate_base_1 = shared->n_age;
  shared->dim_vaccine_progression_rate_base_2 = shared->n_vax;
  shared->n_real_strains = (shared->n_strains == 4 ? 2 : 1);
  shared->p_EI = 1 - dust::math::exp(- shared->gamma_E * shared->dt);
  shared->p_GD = 1 - dust::math::exp(- shared->gamma_G * shared->dt);
  shared->p_Hx = 1 - dust::math::exp(- shared->gamma_H * shared->dt);
  shared->p_I_AR = 1 - dust::math::exp(- shared->gamma_A * shared->dt);
  shared->p_I_Cx = 1 - dust::math::exp(- shared->gamma_C * shared->dt);
  shared->p_I_PI_C = 1 - dust::math::exp(- shared->gamma_P * shared->dt);
  shared->p_T_P_1T_N_1 = 1 - dust::math::exp(- shared->gamma_P_1 * shared->dt);
  shared->p_T_pre_1x = 1 - dust::math::exp(- shared->gamma_pre_1 * shared->dt);
  shared->steps_per_day = 1 / (real_type) shared->dt;
  shared->initial_N_tot = std::vector<real_type>(shared->dim_N_tot);
  shared->dim_cross_immunity = shared->n_real_strains;
  shared->dim_D = shared->dim_D_1 * shared->dim_D_2 * shared->dim_D_3;
  shared->dim_D_12 = shared->dim_D_1 * shared->dim_D_2;
  shared->dim_E = shared->dim_E_1 * shared->dim_E_2 * shared->dim_E_3;
  shared->dim_E_12 = shared->dim_E_1 * shared->dim_E_2;
  shared->dim_G = shared->dim_G_1 * shared->dim_G_2 * shared->dim_G_3;
  shared->dim_G_12 = shared->dim_G_1 * shared->dim_G_2;
  shared->dim_H = shared->dim_H_1 * shared->dim_H_2 * shared->dim_H_3;
  shared->dim_H_12 = shared->dim_H_1 * shared->dim_H_2;
  shared->dim_I_A = shared->dim_I_A_1 * shared->dim_I_A_2 * shared->dim_I_A_3;
  shared->dim_I_A_12 = shared->dim_I_A_1 * shared->dim_I_A_2;
  shared->dim_I_C = shared->dim_I_C_1 * shared->dim_I_C_2 * shared->dim_I_C_3;
  shared->dim_I_C_12 = shared->dim_I_C_1 * shared->dim_I_C_2;
  shared->dim_I_P = shared->dim_I_P_1 * shared->dim_I_P_2 * shared->dim_I_P_3;
  shared->dim_I_P_12 = shared->dim_I_P_1 * shared->dim_I_P_2;
  shared->dim_I_rel_inf = shared->dim_I_rel_inf_1 * shared->dim_I_rel_inf_2 * shared->dim_I_rel_inf_3;
  shared->dim_I_rel_inf_12 = shared->dim_I_rel_inf_1 * shared->dim_I_rel_inf_2;
  shared->dim_lambda_1 = shared->n_age;
  shared->dim_lambda_2 = shared->n_real_strains;
  shared->dim_lambda_sus_1 = shared->n_age;
  shared->dim_lambda_sus_2 = shared->n_real_strains;
  shared->dim_lambda_sus_3 = shared->n_vax;
  shared->dim_m = shared->dim_m_1 * shared->dim_m_2;
  shared->dim_n_EI = shared->dim_n_EI_1 * shared->dim_n_EI_2 * shared->dim_n_EI_3;
  shared->dim_n_EI_12 = shared->dim_n_EI_1 * shared->dim_n_EI_2;
  shared->dim_n_EI_A = shared->dim_n_EI_A_1 * shared->dim_n_EI_A_2 * shared->dim_n_EI_A_3;
  shared->dim_n_EI_A_12 = shared->dim_n_EI_A_1 * shared->dim_n_EI_A_2;
  shared->dim_n_EI_P = shared->dim_n_EI_P_1 * shared->dim_n_EI_P_2 * shared->dim_n_EI_P_3;
  shared->dim_n_EI_P_12 = shared->dim_n_EI_P_1 * shared->dim_n_EI_P_2;
  shared->dim_n_EV = shared->dim_n_EV_1 * shared->dim_n_EV_2 * shared->dim_n_EV_3;
  shared->dim_n_EV_12 = shared->dim_n_EV_1 * shared->dim_n_EV_2;
  shared->dim_n_GD = shared->dim_n_GD_1 * shared->dim_n_GD_2 * shared->dim_n_GD_3;
  shared->dim_n_GD_12 = shared->dim_n_GD_1 * shared->dim_n_GD_2;
  shared->dim_n_HD = shared->dim_n_HD_1 * shared->dim_n_HD_2 * shared->dim_n_HD_3;
  shared->dim_n_HD_12 = shared->dim_n_HD_1 * shared->dim_n_HD_2;
  shared->dim_n_HR = shared->dim_n_HR_1 * shared->dim_n_HR_2 * shared->dim_n_HR_3;
  shared->dim_n_HR_12 = shared->dim_n_HR_1 * shared->dim_n_HR_2;
  shared->dim_n_Hx = shared->dim_n_Hx_1 * shared->dim_n_Hx_2 * shared->dim_n_Hx_3;
  shared->dim_n_Hx_12 = shared->dim_n_Hx_1 * shared->dim_n_Hx_2;
  shared->dim_n_I_AR = shared->dim_n_I_AR_1 * shared->dim_n_I_AR_2 * shared->dim_n_I_AR_3;
  shared->dim_n_I_AR_12 = shared->dim_n_I_AR_1 * shared->dim_n_I_AR_2;
  shared->dim_n_I_AV = shared->dim_n_I_AV_1 * shared->dim_n_I_AV_2 * shared->dim_n_I_AV_3;
  shared->dim_n_I_AV_12 = shared->dim_n_I_AV_1 * shared->dim_n_I_AV_2;
  shared->dim_n_I_CG = shared->dim_n_I_CG_1 * shared->dim_n_I_CG_2 * shared->dim_n_I_CG_3;
  shared->dim_n_I_CG_12 = shared->dim_n_I_CG_1 * shared->dim_n_I_CG_2;
  shared->dim_n_I_CH = shared->dim_n_I_CH_1 * shared->dim_n_I_CH_2 * shared->dim_n_I_CH_3;
  shared->dim_n_I_CH_12 = shared->dim_n_I_CH_1 * shared->dim_n_I_CH_2;
  shared->dim_n_I_CHG = shared->dim_n_I_CHG_1 * shared->dim_n_I_CHG_2 * shared->dim_n_I_CHG_3;
  shared->dim_n_I_CHG_12 = shared->dim_n_I_CHG_1 * shared->dim_n_I_CHG_2;
  shared->dim_n_I_CR = shared->dim_n_I_CR_1 * shared->dim_n_I_CR_2 * shared->dim_n_I_CR_3;
  shared->dim_n_I_CR_12 = shared->dim_n_I_CR_1 * shared->dim_n_I_CR_2;
  shared->dim_n_I_Cx = shared->dim_n_I_Cx_1 * shared->dim_n_I_Cx_2 * shared->dim_n_I_Cx_3;
  shared->dim_n_I_Cx_12 = shared->dim_n_I_Cx_1 * shared->dim_n_I_Cx_2;
  shared->dim_n_I_PI_C = shared->dim_n_I_PI_C_1 * shared->dim_n_I_PI_C_2 * shared->dim_n_I_PI_C_3;
  shared->dim_n_I_PI_C_12 = shared->dim_n_I_PI_C_1 * shared->dim_n_I_PI_C_2;
  shared->dim_n_I_PV = shared->dim_n_I_PV_1 * shared->dim_n_I_PV_2 * shared->dim_n_I_PV_3;
  shared->dim_n_I_PV_12 = shared->dim_n_I_PV_1 * shared->dim_n_I_PV_2;
  shared->dim_n_RE = shared->dim_n_RE_1 * shared->dim_n_RE_2 * shared->dim_n_RE_3;
  shared->dim_n_RE_12 = shared->dim_n_RE_1 * shared->dim_n_RE_2;
  shared->dim_n_RS = shared->dim_n_RS_1 * shared->dim_n_RS_2 * shared->dim_n_RS_3;
  shared->dim_n_RS_12 = shared->dim_n_RS_1 * shared->dim_n_RS_2;
  shared->dim_n_RV = shared->dim_n_RV_1 * shared->dim_n_RV_2 * shared->dim_n_RV_3;
  shared->dim_n_RV_12 = shared->dim_n_RV_1 * shared->dim_n_RV_2;
  shared->dim_n_Rx = shared->dim_n_Rx_1 * shared->dim_n_Rx_2 * shared->dim_n_Rx_3;
  shared->dim_n_Rx_12 = shared->dim_n_Rx_1 * shared->dim_n_Rx_2;
  shared->dim_n_SE = shared->dim_n_SE_1 * shared->dim_n_SE_2 * shared->dim_n_SE_3;
  shared->dim_n_SE_12 = shared->dim_n_SE_1 * shared->dim_n_SE_2;
  shared->dim_n_SE_tot = shared->dim_n_SE_tot_1 * shared->dim_n_SE_tot_2;
  shared->dim_n_SV = shared->dim_n_SV_1 * shared->dim_n_SV_2;
  shared->dim_n_T_P_1T_N_1 = shared->dim_n_T_P_1T_N_1_1 * shared->dim_n_T_P_1T_N_1_2 * shared->dim_n_T_P_1T_N_1_3;
  shared->dim_n_T_P_1T_N_1_12 = shared->dim_n_T_P_1T_N_1_1 * shared->dim_n_T_P_1T_N_1_2;
  shared->dim_n_T_pre_1T_P_1 = shared->dim_n_T_pre_1T_P_1_1 * shared->dim_n_T_pre_1T_P_1_2 * shared->dim_n_T_pre_1T_P_1_3;
  shared->dim_n_T_pre_1T_P_1_12 = shared->dim_n_T_pre_1T_P_1_1 * shared->dim_n_T_pre_1T_P_1_2;
  shared->dim_n_T_pre_1x = shared->dim_n_T_pre_1x_1 * shared->dim_n_T_pre_1x_2 * shared->dim_n_T_pre_1x_3;
  shared->dim_n_T_pre_1x_12 = shared->dim_n_T_pre_1x_1 * shared->dim_n_T_pre_1x_2;
  shared->dim_n_V = shared->dim_n_V_1 * shared->dim_n_V_2;
  shared->dim_p_EV = shared->dim_p_EV_1 * shared->dim_p_EV_2 * shared->dim_p_EV_3;
  shared->dim_p_EV_12 = shared->dim_p_EV_1 * shared->dim_p_EV_2;
  shared->dim_p_I_AV = shared->dim_p_I_AV_1 * shared->dim_p_I_AV_2 * shared->dim_p_I_AV_3;
  shared->dim_p_I_AV_12 = shared->dim_p_I_AV_1 * shared->dim_p_I_AV_2;
  shared->dim_p_I_PV = shared->dim_p_I_PV_1 * shared->dim_p_I_PV_2 * shared->dim_p_I_PV_3;
  shared->dim_p_I_PV_12 = shared->dim_p_I_PV_1 * shared->dim_p_I_PV_2;
  shared->dim_p_RS = shared->dim_p_RS_1 * shared->dim_p_RS_2 * shared->dim_p_RS_3;
  shared->dim_p_RS_12 = shared->dim_p_RS_1 * shared->dim_p_RS_2;
  shared->dim_p_RV = shared->dim_p_RV_1 * shared->dim_p_RV_2 * shared->dim_p_RV_3;
  shared->dim_p_RV_12 = shared->dim_p_RV_1 * shared->dim_p_RV_2;
  shared->dim_p_Rx = shared->dim_p_Rx_1 * shared->dim_p_Rx_2 * shared->dim_p_Rx_3;
  shared->dim_p_Rx_12 = shared->dim_p_Rx_1 * shared->dim_p_Rx_2;
  shared->dim_p_SE = shared->dim_p_SE_1 * shared->dim_p_SE_2;
  shared->dim_p_SV = shared->dim_p_SV_1 * shared->dim_p_SV_2;
  shared->dim_p_V = shared->dim_p_V_1 * shared->dim_p_V_2;
  shared->dim_R = shared->dim_R_1 * shared->dim_R_2 * shared->dim_R_3;
  shared->dim_R_12 = shared->dim_R_1 * shared->dim_R_2;
  shared->dim_rate_Rx = shared->dim_rate_Rx_1 * shared->dim_rate_Rx_2 * shared->dim_rate_Rx_3;
  shared->dim_rate_Rx_12 = shared->dim_rate_Rx_1 * shared->dim_rate_Rx_2;
  shared->dim_rel_foi_strain_1 = shared->n_age;
  shared->dim_rel_foi_strain_2 = shared->n_real_strains;
  shared->dim_rel_foi_strain_3 = shared->n_vax;
  shared->dim_rel_infectivity = shared->dim_rel_infectivity_1 * shared->dim_rel_infectivity_2 * shared->dim_rel_infectivity_3;
  shared->dim_rel_infectivity_12 = shared->dim_rel_infectivity_1 * shared->dim_rel_infectivity_2;
  shared->dim_rel_p_death = shared->dim_rel_p_death_1 * shared->dim_rel_p_death_2 * shared->dim_rel_p_death_3;
  shared->dim_rel_p_death_12 = shared->dim_rel_p_death_1 * shared->dim_rel_p_death_2;
  shared->dim_rel_p_hosp_if_sympt = shared->dim_rel_p_hosp_if_sympt_1 * shared->dim_rel_p_hosp_if_sympt_2 * shared->dim_rel_p_hosp_if_sympt_3;
  shared->dim_rel_p_hosp_if_sympt_12 = shared->dim_rel_p_hosp_if_sympt_1 * shared->dim_rel_p_hosp_if_sympt_2;
  shared->dim_rel_p_sympt = shared->dim_rel_p_sympt_1 * shared->dim_rel_p_sympt_2 * shared->dim_rel_p_sympt_3;
  shared->dim_rel_p_sympt_12 = shared->dim_rel_p_sympt_1 * shared->dim_rel_p_sympt_2;
  shared->dim_rel_susceptibility = shared->dim_rel_susceptibility_1 * shared->dim_rel_susceptibility_2 * shared->dim_rel_susceptibility_3;
  shared->dim_rel_susceptibility_12 = shared->dim_rel_susceptibility_1 * shared->dim_rel_susceptibility_2;
  shared->dim_S = shared->dim_S_1 * shared->dim_S_2;
  shared->dim_s_ij = shared->dim_s_ij_1 * shared->dim_s_ij_2 * shared->dim_s_ij_3;
  shared->dim_s_ij_12 = shared->dim_s_ij_1 * shared->dim_s_ij_2;
  shared->dim_T_N_1 = shared->dim_T_N_1_1 * shared->dim_T_N_1_2 * shared->dim_T_N_1_3;
  shared->dim_T_N_1_12 = shared->dim_T_N_1_1 * shared->dim_T_N_1_2;
  shared->dim_T_P_1 = shared->dim_T_P_1_1 * shared->dim_T_P_1_2 * shared->dim_T_P_1_3;
  shared->dim_T_P_1_12 = shared->dim_T_P_1_1 * shared->dim_T_P_1_2;
  shared->dim_T_pre_1 = shared->dim_T_pre_1_1 * shared->dim_T_pre_1_2 * shared->dim_T_pre_1_3;
  shared->dim_T_pre_1_12 = shared->dim_T_pre_1_1 * shared->dim_T_pre_1_2;
  shared->dim_total_attempted_doses = shared->dim_total_attempted_doses_1 * shared->dim_total_attempted_doses_2;
  shared->dim_vaccine_attempted_doses = shared->dim_vaccine_attempted_doses_1 * shared->dim_vaccine_attempted_doses_2;
  shared->dim_vaccine_dose_step_12 = shared->dim_vaccine_dose_step_1 * shared->dim_vaccine_dose_step_2;
  shared->dim_vaccine_missed_doses = shared->dim_vaccine_missed_doses_1 * shared->dim_vaccine_missed_doses_2;
  shared->dim_vaccine_n_candidates = shared->dim_vaccine_n_candidates_1 * shared->dim_vaccine_n_candidates_2;
  shared->dim_vaccine_probability_doses = shared->dim_vaccine_probability_doses_1 * shared->dim_vaccine_probability_doses_2;
  shared->dim_vaccine_progression_rate_base = shared->dim_vaccine_progression_rate_base_1 * shared->dim_vaccine_progression_rate_base_2;
  shared->index_dose = user_get_array_fixed<int, 1>(user, "index_dose", shared->index_dose, {shared->dim_index_dose}, NA_INTEGER, NA_INTEGER);
  shared->index_dose_inverse = user_get_array_fixed<int, 1>(user, "index_dose_inverse", shared->index_dose_inverse, {shared->dim_index_dose_inverse}, NA_INTEGER, NA_INTEGER);
  for (int i = 1; i <= shared->dim_N_tot; ++i) {
    shared->initial_N_tot[i - 1] = 0;
  }
  shared->offset_variable_S = shared->dim_N_tot + 20;
  shared->p_C = user_get_array_fixed<real_type, 1>(user, "p_C", shared->p_C, {shared->dim_p_C}, NA_REAL, NA_REAL);
  shared->p_D = user_get_array_fixed<real_type, 1>(user, "p_D", shared->p_D, {shared->dim_p_D}, NA_REAL, NA_REAL);
  shared->p_G = user_get_array_fixed<real_type, 1>(user, "p_G", shared->p_G, {shared->dim_p_G}, NA_REAL, NA_REAL);
  shared->p_H = user_get_array_fixed<real_type, 1>(user, "p_H", shared->p_H, {shared->dim_p_H}, NA_REAL, NA_REAL);
  shared->seed_step_end = shared->seed_step_start + shared->dim_seed_value;
  shared->strain_rel_p_death = user_get_array_fixed<real_type, 1>(user, "strain_rel_p_death", shared->strain_rel_p_death, {shared->dim_strain_rel_p_death}, NA_REAL, NA_REAL);
  shared->strain_rel_p_hosp_if_sympt = user_get_array_fixed<real_type, 1>(user, "strain_rel_p_hosp_if_sympt", shared->strain_rel_p_hosp_if_sympt, {shared->dim_strain_rel_p_hosp_if_sympt}, NA_REAL, NA_REAL);
  shared->strain_rel_p_sympt = user_get_array_fixed<real_type, 1>(user, "strain_rel_p_sympt", shared->strain_rel_p_sympt, {shared->dim_strain_rel_p_sympt}, NA_REAL, NA_REAL);
  shared->strain_seed_step_end = shared->strain_seed_step_start + shared->dim_strain_seed_value;
  shared->strain_transmission = user_get_array_fixed<real_type, 1>(user, "strain_transmission", shared->strain_transmission, {shared->dim_strain_transmission}, NA_REAL, NA_REAL);
  internal.I_rel_inf = std::vector<real_type>(shared->dim_I_rel_inf);
  shared->initial_D = std::vector<real_type>(shared->dim_D);
  shared->initial_E = std::vector<real_type>(shared->dim_E);
  shared->initial_G = std::vector<real_type>(shared->dim_G);
  shared->initial_H = std::vector<real_type>(shared->dim_H);
  shared->initial_I_A = std::vector<real_type>(shared->dim_I_A);
  shared->initial_I_C = std::vector<real_type>(shared->dim_I_C);
  shared->initial_I_P = std::vector<real_type>(shared->dim_I_P);
  shared->initial_R = std::vector<real_type>(shared->dim_R);
  shared->initial_S = std::vector<real_type>(shared->dim_S);
  shared->initial_T_N_1 = std::vector<real_type>(shared->dim_T_N_1);
  shared->initial_T_P_1 = std::vector<real_type>(shared->dim_T_P_1);
  shared->initial_T_pre_1 = std::vector<real_type>(shared->dim_T_pre_1);
  shared->initial_vaccine_missed_doses = std::vector<real_type>(shared->dim_vaccine_missed_doses);
  internal.n_EI = std::vector<real_type>(shared->dim_n_EI);
  internal.n_EI_A = std::vector<real_type>(shared->dim_n_EI_A);
  internal.n_EI_P = std::vector<real_type>(shared->dim_n_EI_P);
  internal.n_EV = std::vector<real_type>(shared->dim_n_EV);
  internal.n_GD = std::vector<real_type>(shared->dim_n_GD);
  internal.n_HD = std::vector<real_type>(shared->dim_n_HD);
  internal.n_HR = std::vector<real_type>(shared->dim_n_HR);
  internal.n_Hx = std::vector<real_type>(shared->dim_n_Hx);
  internal.n_I_AR = std::vector<real_type>(shared->dim_n_I_AR);
  internal.n_I_AV = std::vector<real_type>(shared->dim_n_I_AV);
  internal.n_I_CG = std::vector<real_type>(shared->dim_n_I_CG);
  internal.n_I_CH = std::vector<real_type>(shared->dim_n_I_CH);
  internal.n_I_CHG = std::vector<real_type>(shared->dim_n_I_CHG);
  internal.n_I_CR = std::vector<real_type>(shared->dim_n_I_CR);
  internal.n_I_Cx = std::vector<real_type>(shared->dim_n_I_Cx);
  internal.n_I_PI_C = std::vector<real_type>(shared->dim_n_I_PI_C);
  internal.n_I_PV = std::vector<real_type>(shared->dim_n_I_PV);
  internal.n_RE = std::vector<real_type>(shared->dim_n_RE);
  internal.n_RS = std::vector<real_type>(shared->dim_n_RS);
  internal.n_RV = std::vector<real_type>(shared->dim_n_RV);
  internal.n_Rx = std::vector<real_type>(shared->dim_n_Rx);
  internal.n_SE = std::vector<real_type>(shared->dim_n_SE);
  internal.n_SE_tot = std::vector<real_type>(shared->dim_n_SE_tot);
  internal.n_SV = std::vector<real_type>(shared->dim_n_SV);
  internal.n_T_P_1T_N_1 = std::vector<real_type>(shared->dim_n_T_P_1T_N_1);
  internal.n_T_pre_1T_P_1 = std::vector<real_type>(shared->dim_n_T_pre_1T_P_1);
  internal.n_T_pre_1x = std::vector<real_type>(shared->dim_n_T_pre_1x);
  internal.n_V = std::vector<real_type>(shared->dim_n_V);
  internal.p_EV = std::vector<real_type>(shared->dim_p_EV);
  internal.p_I_AV = std::vector<real_type>(shared->dim_p_I_AV);
  internal.p_I_PV = std::vector<real_type>(shared->dim_p_I_PV);
  internal.p_RS = std::vector<real_type>(shared->dim_p_RS);
  internal.p_RV = std::vector<real_type>(shared->dim_p_RV);
  internal.p_Rx = std::vector<real_type>(shared->dim_p_Rx);
  internal.p_SE = std::vector<real_type>(shared->dim_p_SE);
  internal.p_SV = std::vector<real_type>(shared->dim_p_SV);
  internal.p_V = std::vector<real_type>(shared->dim_p_V);
  internal.rate_Rx = std::vector<real_type>(shared->dim_rate_Rx);
  internal.s_ij = std::vector<real_type>(shared->dim_s_ij);
  internal.total_attempted_doses = std::vector<real_type>(shared->dim_total_attempted_doses);
  internal.vaccine_attempted_doses = std::vector<real_type>(shared->dim_vaccine_attempted_doses);
  internal.vaccine_n_candidates = std::vector<real_type>(shared->dim_vaccine_n_candidates);
  internal.vaccine_probability_doses = std::vector<real_type>(shared->dim_vaccine_probability_doses);
  shared->cross_immunity = user_get_array_fixed<real_type, 1>(user, "cross_immunity", shared->cross_immunity, {shared->dim_cross_immunity}, NA_REAL, NA_REAL);
  shared->dim_lambda = shared->dim_lambda_1 * shared->dim_lambda_2;
  shared->dim_lambda_sus = shared->dim_lambda_sus_1 * shared->dim_lambda_sus_2 * shared->dim_lambda_sus_3;
  shared->dim_lambda_sus_12 = shared->dim_lambda_sus_1 * shared->dim_lambda_sus_2;
  shared->dim_rel_foi_strain = shared->dim_rel_foi_strain_1 * shared->dim_rel_foi_strain_2 * shared->dim_rel_foi_strain_3;
  shared->dim_rel_foi_strain_12 = shared->dim_rel_foi_strain_1 * shared->dim_rel_foi_strain_2;
  for (int i = 1; i <= shared->dim_D_1; ++i) {
    for (int j = 1; j <= shared->dim_D_2; ++j) {
      for (int k = 1; k <= shared->dim_D_3; ++k) {
        shared->initial_D[i - 1 + shared->dim_D_1 * (j - 1) + shared->dim_D_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_E_1; ++i) {
    for (int j = 1; j <= shared->dim_E_2; ++j) {
      for (int k = 1; k <= shared->dim_E_3; ++k) {
        shared->initial_E[i - 1 + shared->dim_E_1 * (j - 1) + shared->dim_E_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_G_1; ++i) {
    for (int j = 1; j <= shared->dim_G_2; ++j) {
      for (int k = 1; k <= shared->dim_G_3; ++k) {
        shared->initial_G[i - 1 + shared->dim_G_1 * (j - 1) + shared->dim_G_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_H_1; ++i) {
    for (int j = 1; j <= shared->dim_H_2; ++j) {
      for (int k = 1; k <= shared->dim_H_3; ++k) {
        shared->initial_H[i - 1 + shared->dim_H_1 * (j - 1) + shared->dim_H_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_I_A_1; ++i) {
    for (int j = 1; j <= shared->dim_I_A_2; ++j) {
      for (int k = 1; k <= shared->dim_I_A_3; ++k) {
        shared->initial_I_A[i - 1 + shared->dim_I_A_1 * (j - 1) + shared->dim_I_A_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_I_C_1; ++i) {
    for (int j = 1; j <= shared->dim_I_C_2; ++j) {
      for (int k = 1; k <= shared->dim_I_C_3; ++k) {
        shared->initial_I_C[i - 1 + shared->dim_I_C_1 * (j - 1) + shared->dim_I_C_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_I_P_1; ++i) {
    for (int j = 1; j <= shared->dim_I_P_2; ++j) {
      for (int k = 1; k <= shared->dim_I_P_3; ++k) {
        shared->initial_I_P[i - 1 + shared->dim_I_P_1 * (j - 1) + shared->dim_I_P_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_R_1; ++i) {
    for (int j = 1; j <= shared->dim_R_2; ++j) {
      for (int k = 1; k <= shared->dim_R_3; ++k) {
        shared->initial_R[i - 1 + shared->dim_R_1 * (j - 1) + shared->dim_R_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_S_1; ++i) {
    for (int j = 1; j <= shared->dim_S_2; ++j) {
      shared->initial_S[i - 1 + shared->dim_S_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_T_N_1_1; ++i) {
    for (int j = 1; j <= shared->dim_T_N_1_2; ++j) {
      for (int k = 1; k <= shared->dim_T_N_1_3; ++k) {
        shared->initial_T_N_1[i - 1 + shared->dim_T_N_1_1 * (j - 1) + shared->dim_T_N_1_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_T_P_1_1; ++i) {
    for (int j = 1; j <= shared->dim_T_P_1_2; ++j) {
      for (int k = 1; k <= shared->dim_T_P_1_3; ++k) {
        shared->initial_T_P_1[i - 1 + shared->dim_T_P_1_1 * (j - 1) + shared->dim_T_P_1_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_T_pre_1_1; ++i) {
    for (int j = 1; j <= shared->dim_T_pre_1_2; ++j) {
      for (int k = 1; k <= shared->dim_T_pre_1_3; ++k) {
        shared->initial_T_pre_1[i - 1 + shared->dim_T_pre_1_1 * (j - 1) + shared->dim_T_pre_1_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_vaccine_missed_doses_1; ++i) {
    for (int j = 1; j <= shared->dim_vaccine_missed_doses_2; ++j) {
      shared->initial_vaccine_missed_doses[i - 1 + shared->dim_vaccine_missed_doses_1 * (j - 1)] = 0;
    }
  }
  shared->m = user_get_array_fixed<real_type, 2>(user, "m", shared->m, {shared->dim_m_1, shared->dim_m_2}, NA_REAL, NA_REAL);
  shared->offset_variable_D = shared->dim_E + shared->dim_G + shared->dim_H + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_R + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_E = shared->dim_N_tot + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_G = shared->dim_E + shared->dim_H + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_R + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_H = shared->dim_E + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_R + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_I_A = shared->dim_E + shared->dim_I_P + shared->dim_N_tot + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_I_C = shared->dim_E + shared->dim_I_A + shared->dim_I_P + shared->dim_N_tot + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_I_P = shared->dim_E + shared->dim_N_tot + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_R = shared->dim_E + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_T_N_1 = shared->dim_D + shared->dim_E + shared->dim_G + shared->dim_H + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_R + shared->dim_S + shared->dim_T_P_1 + shared->dim_T_pre_1 + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_T_P_1 = shared->dim_D + shared->dim_E + shared->dim_G + shared->dim_H + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_R + shared->dim_S + shared->dim_T_pre_1 + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_T_pre_1 = shared->dim_D + shared->dim_E + shared->dim_G + shared->dim_H + shared->dim_I_A + shared->dim_I_C + shared->dim_I_P + shared->dim_N_tot + shared->dim_R + shared->dim_S + shared->dim_vaccine_missed_doses + 20;
  shared->offset_variable_vaccine_missed_doses = shared->dim_N_tot + shared->dim_S + 20;
  shared->rel_infectivity = user_get_array_fixed<real_type, 3>(user, "rel_infectivity", shared->rel_infectivity, {shared->dim_rel_infectivity_1, shared->dim_rel_infectivity_2, shared->dim_rel_infectivity_3}, NA_REAL, NA_REAL);
  shared->rel_p_death = user_get_array_fixed<real_type, 3>(user, "rel_p_death", shared->rel_p_death, {shared->dim_rel_p_death_1, shared->dim_rel_p_death_2, shared->dim_rel_p_death_3}, NA_REAL, NA_REAL);
  shared->rel_p_hosp_if_sympt = user_get_array_fixed<real_type, 3>(user, "rel_p_hosp_if_sympt", shared->rel_p_hosp_if_sympt, {shared->dim_rel_p_hosp_if_sympt_1, shared->dim_rel_p_hosp_if_sympt_2, shared->dim_rel_p_hosp_if_sympt_3}, NA_REAL, NA_REAL);
  shared->rel_p_sympt = user_get_array_fixed<real_type, 3>(user, "rel_p_sympt", shared->rel_p_sympt, {shared->dim_rel_p_sympt_1, shared->dim_rel_p_sympt_2, shared->dim_rel_p_sympt_3}, NA_REAL, NA_REAL);
  shared->rel_susceptibility = user_get_array_fixed<real_type, 3>(user, "rel_susceptibility", shared->rel_susceptibility, {shared->dim_rel_susceptibility_1, shared->dim_rel_susceptibility_2, shared->dim_rel_susceptibility_3}, NA_REAL, NA_REAL);
  shared->vaccine_progression_rate_base = user_get_array_fixed<real_type, 2>(user, "vaccine_progression_rate_base", shared->vaccine_progression_rate_base, {shared->dim_vaccine_progression_rate_base_1, shared->dim_vaccine_progression_rate_base_2}, NA_REAL, NA_REAL);
  internal.lambda = std::vector<real_type>(shared->dim_lambda);
  internal.lambda_sus = std::vector<real_type>(shared->dim_lambda_sus);
  internal.rel_foi_strain = std::vector<real_type>(shared->dim_rel_foi_strain);
  return dust::pars_type<seirhdagevaxmultistrainsero>(shared, internal);
}
template <>
cpp11::sexp dust_info<seirhdagevaxmultistrainsero>(const dust::pars_type<seirhdagevaxmultistrainsero>& pars) {
  const std::shared_ptr<const seirhdagevaxmultistrainsero::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"time", "H_inc", "D_inc", "H_inc_0_39", "H_inc_40_49", "H_inc_50_59", "H_inc_60_69", "H_inc_70_plus", "D_inc_0_39", "D_inc_40_49", "D_inc_50_59", "D_inc_60_69", "D_inc_70_plus", "sero_pos_1", "sero_pos_1_20_29", "sero_pos_1_30_39", "sero_pos_1_40_49", "sero_pos_1_50_59", "sero_pos_1_60_69", "sero_pos_1_70_plus", "N_tot", "S", "vaccine_missed_doses", "E", "I_P", "I_A", "I_C", "R", "H", "G", "D", "T_pre_1", "T_P_1", "T_N_1"});
  cpp11::writable::list dim(34);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim[5] = cpp11::writable::integers({1});
  dim[6] = cpp11::writable::integers({1});
  dim[7] = cpp11::writable::integers({1});
  dim[8] = cpp11::writable::integers({1});
  dim[9] = cpp11::writable::integers({1});
  dim[10] = cpp11::writable::integers({1});
  dim[11] = cpp11::writable::integers({1});
  dim[12] = cpp11::writable::integers({1});
  dim[13] = cpp11::writable::integers({1});
  dim[14] = cpp11::writable::integers({1});
  dim[15] = cpp11::writable::integers({1});
  dim[16] = cpp11::writable::integers({1});
  dim[17] = cpp11::writable::integers({1});
  dim[18] = cpp11::writable::integers({1});
  dim[19] = cpp11::writable::integers({1});
  dim[20] = cpp11::writable::integers({shared->dim_N_tot});
  dim[21] = cpp11::writable::integers({shared->dim_S_1, shared->dim_S_2});
  dim[22] = cpp11::writable::integers({shared->dim_vaccine_missed_doses_1, shared->dim_vaccine_missed_doses_2});
  dim[23] = cpp11::writable::integers({shared->dim_E_1, shared->dim_E_2, shared->dim_E_3});
  dim[24] = cpp11::writable::integers({shared->dim_I_P_1, shared->dim_I_P_2, shared->dim_I_P_3});
  dim[25] = cpp11::writable::integers({shared->dim_I_A_1, shared->dim_I_A_2, shared->dim_I_A_3});
  dim[26] = cpp11::writable::integers({shared->dim_I_C_1, shared->dim_I_C_2, shared->dim_I_C_3});
  dim[27] = cpp11::writable::integers({shared->dim_R_1, shared->dim_R_2, shared->dim_R_3});
  dim[28] = cpp11::writable::integers({shared->dim_H_1, shared->dim_H_2, shared->dim_H_3});
  dim[29] = cpp11::writable::integers({shared->dim_G_1, shared->dim_G_2, shared->dim_G_3});
  dim[30] = cpp11::writable::integers({shared->dim_D_1, shared->dim_D_2, shared->dim_D_3});
  dim[31] = cpp11::writable::integers({shared->dim_T_pre_1_1, shared->dim_T_pre_1_2, shared->dim_T_pre_1_3});
  dim[32] = cpp11::writable::integers({shared->dim_T_P_1_1, shared->dim_T_P_1_2, shared->dim_T_P_1_3});
  dim[33] = cpp11::writable::integers({shared->dim_T_N_1_1, shared->dim_T_N_1_2, shared->dim_T_N_1_3});
  dim.names() = nms;
  cpp11::writable::list index(34);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index[5] = cpp11::writable::integers({6});
  index[6] = cpp11::writable::integers({7});
  index[7] = cpp11::writable::integers({8});
  index[8] = cpp11::writable::integers({9});
  index[9] = cpp11::writable::integers({10});
  index[10] = cpp11::writable::integers({11});
  index[11] = cpp11::writable::integers({12});
  index[12] = cpp11::writable::integers({13});
  index[13] = cpp11::writable::integers({14});
  index[14] = cpp11::writable::integers({15});
  index[15] = cpp11::writable::integers({16});
  index[16] = cpp11::writable::integers({17});
  index[17] = cpp11::writable::integers({18});
  index[18] = cpp11::writable::integers({19});
  index[19] = cpp11::writable::integers({20});
  index[20] = integer_sequence(21, shared->dim_N_tot);
  index[21] = integer_sequence(shared->offset_variable_S + 1, shared->dim_S);
  index[22] = integer_sequence(shared->offset_variable_vaccine_missed_doses + 1, shared->dim_vaccine_missed_doses);
  index[23] = integer_sequence(shared->offset_variable_E + 1, shared->dim_E);
  index[24] = integer_sequence(shared->offset_variable_I_P + 1, shared->dim_I_P);
  index[25] = integer_sequence(shared->offset_variable_I_A + 1, shared->dim_I_A);
  index[26] = integer_sequence(shared->offset_variable_I_C + 1, shared->dim_I_C);
  index[27] = integer_sequence(shared->offset_variable_R + 1, shared->dim_R);
  index[28] = integer_sequence(shared->offset_variable_H + 1, shared->dim_H);
  index[29] = integer_sequence(shared->offset_variable_G + 1, shared->dim_G);
  index[30] = integer_sequence(shared->offset_variable_D + 1, shared->dim_D);
  index[31] = integer_sequence(shared->offset_variable_T_pre_1 + 1, shared->dim_T_pre_1);
  index[32] = integer_sequence(shared->offset_variable_T_P_1 + 1, shared->dim_T_P_1);
  index[33] = integer_sequence(shared->offset_variable_T_N_1 + 1, shared->dim_T_N_1);
  index.names() = nms;
  size_t len = shared->offset_variable_T_N_1 + shared->dim_T_N_1;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}
